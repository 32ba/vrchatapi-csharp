# io.github.vrchatapi - the C# library for the VRChat API Documentation

![VRChat API Banner](https://raw.githubusercontent.com/vrchatapi/vrchatapi.github.io/master/assets/apibanner.png)

# VRChat API Documentation
This project is an [OPEN Open Source Project](https://openopensource.org)

Individuals making significant and valuable contributions are given
commit-access to the project to contribute as they see fit. This project
is more like an open wiki than a standard guarded open source project.

## Disclaimer

This is the official response of the VRChat Team (from Tupper more specifically) on the usage of the VRChat API.

> **Use of the API using applications other than the approved methods (website, VRChat application) are not officially supported. You may use the API for your own application, but keep these guidelines in mind:**
> * We do not provide documentation or support for the API.
> * Do not make queries to the API more than once per 60 seconds.
> * Abuse of the API may result in account termination.
> * Access to API endpoints may break at any given time, with no warning.

As stated, this documentation was not created with the help of the official VRChat team. Therefore this documentation is not an official documentation of the VRChat API and may not be always up to date with the latest versions. If you find that a page or endpoint is not longer valid please create an issue and tell us so we can fix it.

## Get in touch with us!

[https://discord.gg/qjZE9C9fkB#vrchat-api](https://discord.gg/qjZE9C9fkB)

This C# SDK is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:

- API version: 1.0.1
- SDK version: 1.0.0
- Build package: org.openapitools.codegen.languages.CSharpClientCodegen
    For more information, please visit [https://github.com/VRChatAPI](https://github.com/VRChatAPI)

## Frameworks supported


- .NET 4.0 or later
- Windows Phone 7.1 (Mango)

## Dependencies


- [RestSharp](https://www.nuget.org/packages/RestSharp) - 105.1.0 or later
- [Json.NET](https://www.nuget.org/packages/Newtonsoft.Json/) - 7.0.0 or later
- [JsonSubTypes](https://www.nuget.org/packages/JsonSubTypes/) - 1.2.0 or later

The DLLs included in the package may not be the latest version. We recommend using [NuGet](https://docs.nuget.org/consume/installing-nuget) to obtain the latest version of the packages:

```
Install-Package RestSharp
Install-Package Newtonsoft.Json
Install-Package JsonSubTypes
```

NOTE: RestSharp versions greater than 105.1.0 have a bug which causes file uploads to fail. See [RestSharp#742](https://github.com/restsharp/RestSharp/issues/742)

## Installation

Run the following command to generate the DLL

- [Mac/Linux] `/bin/sh build.sh`
- [Windows] `build.bat`

Then include the DLL (under the `bin` folder) in the C# project, and use the namespaces:

```csharp
using io.github.vrchatapi.Api;
using io.github.vrchatapi.Client;
using io.github.vrchatapi.Model;

```


## Packaging

A `.nuspec` is included with the project. You can follow the Nuget quickstart to [create](https://docs.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package#create-the-package) and [publish](https://docs.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package#publish-the-package) packages.

This `.nuspec` uses placeholders from the `.csproj`, so build the `.csproj` directly:

```
nuget pack -Build -OutputDirectory out io.github.vrchatapi.csproj
```

Then, publish to a [local feed](https://docs.microsoft.com/en-us/nuget/hosting-packages/local-feeds) or [other host](https://docs.microsoft.com/en-us/nuget/hosting-packages/overview) and consume the new package via Nuget as usual.


## Getting Started

```csharp
using System.Collections.Generic;
using System.Diagnostics;
using io.github.vrchatapi.Api;
using io.github.vrchatapi.Client;
using io.github.vrchatapi.Model;

namespace Example
{
    public class Example
    {
        public static void Main()
        {

            Configuration.Default.BasePath = "https://api.vrchat.cloud/api/1";
            // Configure API key authorization: apiKeyCookie
            Configuration.Default.ApiKey.Add("apiKey", "YOUR_API_KEY");
            // Uncomment below to setup prefix (e.g. Bearer) for API key, if needed
            // Configuration.Default.ApiKeyPrefix.Add("apiKey", "Bearer");
            // Configure API key authorization: authCookie
            Configuration.Default.ApiKey.Add("auth", "YOUR_API_KEY");
            // Uncomment below to setup prefix (e.g. Bearer) for API key, if needed
            // Configuration.Default.ApiKeyPrefix.Add("auth", "Bearer");

            var apiInstance = new AuthenticationApi(Configuration.Default);
            var userId = userId_example;  // string | 

            try
            {
                // Delete User
                CurrentUser result = apiInstance.DeleteUserById(userId);
                Debug.WriteLine(result);
            }
            catch (ApiException e)
            {
                Debug.Print("Exception when calling AuthenticationApi.DeleteUserById: " + e.Message );
                Debug.Print("Status Code: "+ e.ErrorCode);
                Debug.Print(e.StackTrace);
            }

        }
    }
}
```

## Documentation for API Endpoints

All URIs are relative to *https://api.vrchat.cloud/api/1*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
*AuthenticationApi* | [**DeleteUserById**](docs/AuthenticationApi.md#deleteuserbyid) | **PUT** /user/{userId}/delete | Delete User
*AuthenticationApi* | [**GetCurrentUser**](docs/AuthenticationApi.md#getcurrentuser) | **GET** /auth/user | Login and/or Get Current User Info
*AuthenticationApi* | [**Logout**](docs/AuthenticationApi.md#logout) | **PUT** /logout | Logout
*AuthenticationApi* | [**Verify2FA**](docs/AuthenticationApi.md#verify2fa) | **POST** /auth/twofactorauth/totp/verify | Verify 2FA code
*AuthenticationApi* | [**VerifyAuthToken**](docs/AuthenticationApi.md#verifyauthtoken) | **GET** /auth | Verify Auth Token
*AuthenticationApi* | [**VerifyRecoveryCode**](docs/AuthenticationApi.md#verifyrecoverycode) | **POST** /auth/twofactorauth/otp/verify | Verify 2FA code with Recovery code
*FilesApi* | [**CreateFile**](docs/FilesApi.md#createfile) | **POST** /file | Create File
*FilesApi* | [**CreateFileVersion**](docs/FilesApi.md#createfileversion) | **POST** /file/{fileId} | Create File Version
*FilesApi* | [**DeleteFile**](docs/FilesApi.md#deletefile) | **DELETE** /file/{fileId} | Delete File
*FilesApi* | [**DeleteFileVersion**](docs/FilesApi.md#deletefileversion) | **DELETE** /file/{fileId}/{versionId} | Delete File Version
*FilesApi* | [**DownloadFileVersion**](docs/FilesApi.md#downloadfileversion) | **GET** /file/{fileId}/{versionId} | Download File Version
*FilesApi* | [**FinishFileDataUpload**](docs/FilesApi.md#finishfiledataupload) | **PUT** /file/{fileId}/{versionId}/{fileType}/finish | Finish FileData Upload
*FilesApi* | [**GetFile**](docs/FilesApi.md#getfile) | **GET** /file/{fileId} | Show File
*FilesApi* | [**GetFileDataUploadStatus**](docs/FilesApi.md#getfiledatauploadstatus) | **GET** /file/{fileId}/{versionId}/{fileType}/status | Check FileData Upload Status
*FilesApi* | [**GetFiles**](docs/FilesApi.md#getfiles) | **GET** /files | List Files
*FilesApi* | [**StartFileDataUpload**](docs/FilesApi.md#startfiledataupload) | **PUT** /file/{fileId}/{versionId}/{fileType}/start | Start FileData Upload
*FriendsApi* | [**DeleteFriendRequest**](docs/FriendsApi.md#deletefriendrequest) | **DELETE** /user/{userId}/friendRequest | Delete Friend Request
*FriendsApi* | [**Friend**](docs/FriendsApi.md#friend) | **POST** /user/{userId}/friendRequest | Send Friend Request
*FriendsApi* | [**GetFriendStatus**](docs/FriendsApi.md#getfriendstatus) | **GET** /user/{userId}/friendStatus | Check Friend Status
*FriendsApi* | [**GetFriends**](docs/FriendsApi.md#getfriends) | **GET** /auth/user/friends | List Friends
*FriendsApi* | [**Unfriend**](docs/FriendsApi.md#unfriend) | **DELETE** /auth/user/friends/{userId} | Unfriend
*NotificationsApi* | [**AcceptFriendRequest**](docs/NotificationsApi.md#acceptfriendrequest) | **PUT** /auth/user/notifications/{notificationId}/accept | Accept Friend Request
*NotificationsApi* | [**ClearNotifications**](docs/NotificationsApi.md#clearnotifications) | **PUT** /auth/user/notifications/clear | Clear All Notifications
*NotificationsApi* | [**DeleteNotification**](docs/NotificationsApi.md#deletenotification) | **PUT** /auth/user/notifications/{notificationId}/hide | Delete Notification
*NotificationsApi* | [**GetNotifications**](docs/NotificationsApi.md#getnotifications) | **GET** /auth/user/notifications | List Notifications
*NotificationsApi* | [**MarkNotificationAsRead**](docs/NotificationsApi.md#marknotificationasread) | **PUT** /auth/user/notifications/{notificationId}/see | Mark As Read
*SystemApi* | [**GetConfig**](docs/SystemApi.md#getconfig) | **GET** /config | Fetch API Config
*SystemApi* | [**GetCurrentOnlineUsers**](docs/SystemApi.md#getcurrentonlineusers) | **GET** /visits | Current Online Users
*SystemApi* | [**GetHealth**](docs/SystemApi.md#gethealth) | **GET** /health | Check API Health
*SystemApi* | [**GetSystemTime**](docs/SystemApi.md#getsystemtime) | **GET** /time | Current System Time
*UsersApi* | [**GetUser**](docs/UsersApi.md#getuser) | **GET** /users/{userId} | Get User by ID
*UsersApi* | [**GetUserByName**](docs/UsersApi.md#getuserbyname) | **GET** /users/{username}/name | Get User by Username
*UsersApi* | [**SearchActiveUsers**](docs/UsersApi.md#searchactiveusers) | **GET** /users/active | Search Active Users
*UsersApi* | [**SearchUsers**](docs/UsersApi.md#searchusers) | **GET** /users | Search All Users
*UsersApi* | [**UpdateUser**](docs/UsersApi.md#updateuser) | **PUT** /users/{userId} | Update User Info
*WorldsApi* | [**CreateWorld**](docs/WorldsApi.md#createworld) | **POST** /worlds | Create World
*WorldsApi* | [**DeleteWorld**](docs/WorldsApi.md#deleteworld) | **DELETE** /worlds/{worldId} | Delete World
*WorldsApi* | [**GetActiveWorlds**](docs/WorldsApi.md#getactiveworlds) | **GET** /worlds/active | List Active Worlds
*WorldsApi* | [**GetFavoritedWorlds**](docs/WorldsApi.md#getfavoritedworlds) | **GET** /worlds/favorites | List Favorited Worlds
*WorldsApi* | [**GetRecentWorlds**](docs/WorldsApi.md#getrecentworlds) | **GET** /worlds/recent | List Recent Worlds
*WorldsApi* | [**GetWorld**](docs/WorldsApi.md#getworld) | **GET** /worlds/{worldId} | Get World by ID
*WorldsApi* | [**GetWorldMetadata**](docs/WorldsApi.md#getworldmetadata) | **GET** /worlds/{worldId}/metadata | Get World Metadata
*WorldsApi* | [**GetWorldPublish**](docs/WorldsApi.md#getworldpublish) | **GET** /worlds/{worldId}/publish | Get World Publish Status
*WorldsApi* | [**PublishWorld**](docs/WorldsApi.md#publishworld) | **PUT** /worlds/{worldId}/publish | 
*WorldsApi* | [**SearchWorlds**](docs/WorldsApi.md#searchworlds) | **GET** /worlds | Search All Worlds
*WorldsApi* | [**UnpublishWorld**](docs/WorldsApi.md#unpublishworld) | **DELETE** /worlds/{worldId}/publish | 
*WorldsApi* | [**UpdateWorld**](docs/WorldsApi.md#updateworld) | **PUT** /worlds/{worldId} | Update World


## Documentation for Models

 - [Model.Config](docs/Config.md)
 - [Model.ConfigAnnouncements](docs/ConfigAnnouncements.md)
 - [Model.ConfigDownloadUrls](docs/ConfigDownloadUrls.md)
 - [Model.ConfigDynamicWorldRows](docs/ConfigDynamicWorldRows.md)
 - [Model.ConfigEvents](docs/ConfigEvents.md)
 - [Model.CurrentUser](docs/CurrentUser.md)
 - [Model.DeploymentGroup](docs/DeploymentGroup.md)
 - [Model.DeveloperType](docs/DeveloperType.md)
 - [Model.Error](docs/Error.md)
 - [Model.File](docs/File.md)
 - [Model.FileData](docs/FileData.md)
 - [Model.FileStatus](docs/FileStatus.md)
 - [Model.FileVersion](docs/FileVersion.md)
 - [Model.InlineObject](docs/InlineObject.md)
 - [Model.InlineObject1](docs/InlineObject1.md)
 - [Model.InlineObject2](docs/InlineObject2.md)
 - [Model.InlineObject3](docs/InlineObject3.md)
 - [Model.InlineObject4](docs/InlineObject4.md)
 - [Model.InlineObject5](docs/InlineObject5.md)
 - [Model.InlineObject6](docs/InlineObject6.md)
 - [Model.InlineResponse200](docs/InlineResponse200.md)
 - [Model.InlineResponse2001](docs/InlineResponse2001.md)
 - [Model.InlineResponse2002](docs/InlineResponse2002.md)
 - [Model.InlineResponse2003](docs/InlineResponse2003.md)
 - [Model.InlineResponse2004](docs/InlineResponse2004.md)
 - [Model.InlineResponse2005](docs/InlineResponse2005.md)
 - [Model.InlineResponse2006](docs/InlineResponse2006.md)
 - [Model.InlineResponse2007](docs/InlineResponse2007.md)
 - [Model.InlineResponse401](docs/InlineResponse401.md)
 - [Model.LimitedUnityPackage](docs/LimitedUnityPackage.md)
 - [Model.LimitedUser](docs/LimitedUser.md)
 - [Model.LimitedWorld](docs/LimitedWorld.md)
 - [Model.MIMEType](docs/MIMEType.md)
 - [Model.Notification](docs/Notification.md)
 - [Model.NotificationType](docs/NotificationType.md)
 - [Model.Platform](docs/Platform.md)
 - [Model.ReleaseStatus](docs/ReleaseStatus.md)
 - [Model.Response](docs/Response.md)
 - [Model.Success](docs/Success.md)
 - [Model.UnityPackage](docs/UnityPackage.md)
 - [Model.User](docs/User.md)
 - [Model.UserState](docs/UserState.md)
 - [Model.UserStatus](docs/UserStatus.md)
 - [Model.World](docs/World.md)


## Documentation for Authorization


### apiKeyCookie

- **Type**: API key

- **API key parameter name**: apiKey
- **Location**: 


### apiKeyQuery

- **Type**: API key

- **API key parameter name**: apiKey
- **Location**: URL query string


### authCookie

- **Type**: API key

- **API key parameter name**: auth
- **Location**: 


### authHeader


- **Type**: HTTP basic authentication


### twoFactorAuthCookie

- **Type**: API key

- **API key parameter name**: twoFactorAuth
- **Location**: 

