/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: me@ruby.js.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using io.github.vrchatapi.Client;
using io.github.vrchatapi.Model;

namespace io.github.vrchatapi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayermoderationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clear All Player Moderations
        /// </summary>
        /// <remarks>
        /// ⚠️ **This will delete every single player moderation you&#39;ve ever made.**
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Error</returns>
        Error ClearAllPlayerModerations ();

        /// <summary>
        /// Clear All Player Moderations
        /// </summary>
        /// <remarks>
        /// ⚠️ **This will delete every single player moderation you&#39;ve ever made.**
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> ClearAllPlayerModerationsWithHttpInfo ();
        /// <summary>
        /// Delete Player Moderation
        /// </summary>
        /// <remarks>
        /// Deletes a specific player moderation based on it&#39;s &#x60;pmod_&#x60; ID. The website uses &#x60;unmoderateUser&#x60; instead. You can delete the same player moderation multiple times successfully.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerModerationId"></param>
        /// <returns>Success</returns>
        Success DeletePlayerModeration (string playerModerationId);

        /// <summary>
        /// Delete Player Moderation
        /// </summary>
        /// <remarks>
        /// Deletes a specific player moderation based on it&#39;s &#x60;pmod_&#x60; ID. The website uses &#x60;unmoderateUser&#x60; instead. You can delete the same player moderation multiple times successfully.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerModerationId"></param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> DeletePlayerModerationWithHttpInfo (string playerModerationId);
        /// <summary>
        /// Get Player Moderation
        /// </summary>
        /// <remarks>
        /// Returns a single Player Moderation. This returns the exact same amount of information as the more generalised &#x60;getPlayerModerations&#x60;.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerModerationId"></param>
        /// <returns>PlayerModeration</returns>
        PlayerModeration GetPlayerModeration (string playerModerationId);

        /// <summary>
        /// Get Player Moderation
        /// </summary>
        /// <remarks>
        /// Returns a single Player Moderation. This returns the exact same amount of information as the more generalised &#x60;getPlayerModerations&#x60;.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerModerationId"></param>
        /// <returns>ApiResponse of PlayerModeration</returns>
        ApiResponse<PlayerModeration> GetPlayerModerationWithHttpInfo (string playerModerationId);
        /// <summary>
        /// Search Player Moderations
        /// </summary>
        /// <remarks>
        /// Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block. (optional)</param>
        /// <param name="targetUserId">Must be valid UserID. (optional)</param>
        /// <returns>List&lt;PlayerModeration&gt;</returns>
        List<PlayerModeration> GetPlayerModerations (string type = default(string), string targetUserId = default(string));

        /// <summary>
        /// Search Player Moderations
        /// </summary>
        /// <remarks>
        /// Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block. (optional)</param>
        /// <param name="targetUserId">Must be valid UserID. (optional)</param>
        /// <returns>ApiResponse of List&lt;PlayerModeration&gt;</returns>
        ApiResponse<List<PlayerModeration>> GetPlayerModerationsWithHttpInfo (string type = default(string), string targetUserId = default(string));
        /// <summary>
        /// Moderate User
        /// </summary>
        /// <remarks>
        /// Moderate a user, e.g. unmute them or show their avatar.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject12"> (optional)</param>
        /// <returns>PlayerModeration</returns>
        PlayerModeration ModerateUser (InlineObject12 inlineObject12 = default(InlineObject12));

        /// <summary>
        /// Moderate User
        /// </summary>
        /// <remarks>
        /// Moderate a user, e.g. unmute them or show their avatar.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject12"> (optional)</param>
        /// <returns>ApiResponse of PlayerModeration</returns>
        ApiResponse<PlayerModeration> ModerateUserWithHttpInfo (InlineObject12 inlineObject12 = default(InlineObject12));
        /// <summary>
        /// Unmoderate User
        /// </summary>
        /// <remarks>
        /// Removes a player moderation previously added through &#x60;moderateUser&#x60;. E.g if you previuosly have shown their avatar, but now want to reset it to default.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject13"> (optional)</param>
        /// <returns>Success</returns>
        Success UnmoderateUser (InlineObject13 inlineObject13 = default(InlineObject13));

        /// <summary>
        /// Unmoderate User
        /// </summary>
        /// <remarks>
        /// Removes a player moderation previously added through &#x60;moderateUser&#x60;. E.g if you previuosly have shown their avatar, but now want to reset it to default.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject13"> (optional)</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> UnmoderateUserWithHttpInfo (InlineObject13 inlineObject13 = default(InlineObject13));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Clear All Player Moderations
        /// </summary>
        /// <remarks>
        /// ⚠️ **This will delete every single player moderation you&#39;ve ever made.**
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> ClearAllPlayerModerationsAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Clear All Player Moderations
        /// </summary>
        /// <remarks>
        /// ⚠️ **This will delete every single player moderation you&#39;ve ever made.**
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> ClearAllPlayerModerationsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Player Moderation
        /// </summary>
        /// <remarks>
        /// Deletes a specific player moderation based on it&#39;s &#x60;pmod_&#x60; ID. The website uses &#x60;unmoderateUser&#x60; instead. You can delete the same player moderation multiple times successfully.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerModerationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> DeletePlayerModerationAsync (string playerModerationId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Player Moderation
        /// </summary>
        /// <remarks>
        /// Deletes a specific player moderation based on it&#39;s &#x60;pmod_&#x60; ID. The website uses &#x60;unmoderateUser&#x60; instead. You can delete the same player moderation multiple times successfully.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerModerationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> DeletePlayerModerationWithHttpInfoAsync (string playerModerationId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Player Moderation
        /// </summary>
        /// <remarks>
        /// Returns a single Player Moderation. This returns the exact same amount of information as the more generalised &#x60;getPlayerModerations&#x60;.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerModerationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlayerModeration</returns>
        System.Threading.Tasks.Task<PlayerModeration> GetPlayerModerationAsync (string playerModerationId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Player Moderation
        /// </summary>
        /// <remarks>
        /// Returns a single Player Moderation. This returns the exact same amount of information as the more generalised &#x60;getPlayerModerations&#x60;.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerModerationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlayerModeration)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayerModeration>> GetPlayerModerationWithHttpInfoAsync (string playerModerationId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search Player Moderations
        /// </summary>
        /// <remarks>
        /// Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block. (optional)</param>
        /// <param name="targetUserId">Must be valid UserID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;PlayerModeration&gt;</returns>
        System.Threading.Tasks.Task<List<PlayerModeration>> GetPlayerModerationsAsync (string type = default(string), string targetUserId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search Player Moderations
        /// </summary>
        /// <remarks>
        /// Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block. (optional)</param>
        /// <param name="targetUserId">Must be valid UserID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;PlayerModeration&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PlayerModeration>>> GetPlayerModerationsWithHttpInfoAsync (string type = default(string), string targetUserId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Moderate User
        /// </summary>
        /// <remarks>
        /// Moderate a user, e.g. unmute them or show their avatar.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject12"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlayerModeration</returns>
        System.Threading.Tasks.Task<PlayerModeration> ModerateUserAsync (InlineObject12 inlineObject12 = default(InlineObject12), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Moderate User
        /// </summary>
        /// <remarks>
        /// Moderate a user, e.g. unmute them or show their avatar.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject12"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlayerModeration)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayerModeration>> ModerateUserWithHttpInfoAsync (InlineObject12 inlineObject12 = default(InlineObject12), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Unmoderate User
        /// </summary>
        /// <remarks>
        /// Removes a player moderation previously added through &#x60;moderateUser&#x60;. E.g if you previuosly have shown their avatar, but now want to reset it to default.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject13"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> UnmoderateUserAsync (InlineObject13 inlineObject13 = default(InlineObject13), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unmoderate User
        /// </summary>
        /// <remarks>
        /// Removes a player moderation previously added through &#x60;moderateUser&#x60;. E.g if you previuosly have shown their avatar, but now want to reset it to default.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject13"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> UnmoderateUserWithHttpInfoAsync (InlineObject13 inlineObject13 = default(InlineObject13), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlayermoderationApi : IPlayermoderationApi
    {
        private io.github.vrchatapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayermoderationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayermoderationApi(String basePath)
        {
            this.Configuration = new io.github.vrchatapi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = io.github.vrchatapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayermoderationApi"/> class
        /// </summary>
        /// <returns></returns>
        public PlayermoderationApi()
        {
            this.Configuration = io.github.vrchatapi.Client.Configuration.Default;

            ExceptionFactory = io.github.vrchatapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayermoderationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlayermoderationApi(io.github.vrchatapi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = io.github.vrchatapi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = io.github.vrchatapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public io.github.vrchatapi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public io.github.vrchatapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Clear All Player Moderations ⚠️ **This will delete every single player moderation you&#39;ve ever made.**
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Error</returns>
        public Error ClearAllPlayerModerations ()
        {
             ApiResponse<Error> localVarResponse = ClearAllPlayerModerationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear All Player Moderations ⚠️ **This will delete every single player moderation you&#39;ve ever made.**
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Error</returns>
        public ApiResponse<Error> ClearAllPlayerModerationsWithHttpInfo ()
        {

            var localVarPath = "/auth/user/playermoderations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearAllPlayerModerations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Error>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Error) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Error)));
        }

        /// <summary>
        /// Clear All Player Moderations ⚠️ **This will delete every single player moderation you&#39;ve ever made.**
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> ClearAllPlayerModerationsAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Error> localVarResponse = await ClearAllPlayerModerationsWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear All Player Moderations ⚠️ **This will delete every single player moderation you&#39;ve ever made.**
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Error>> ClearAllPlayerModerationsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/auth/user/playermoderations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearAllPlayerModerations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Error>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Error) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Error)));
        }

        /// <summary>
        /// Delete Player Moderation Deletes a specific player moderation based on it&#39;s &#x60;pmod_&#x60; ID. The website uses &#x60;unmoderateUser&#x60; instead. You can delete the same player moderation multiple times successfully.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerModerationId"></param>
        /// <returns>Success</returns>
        public Success DeletePlayerModeration (string playerModerationId)
        {
             ApiResponse<Success> localVarResponse = DeletePlayerModerationWithHttpInfo(playerModerationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Player Moderation Deletes a specific player moderation based on it&#39;s &#x60;pmod_&#x60; ID. The website uses &#x60;unmoderateUser&#x60; instead. You can delete the same player moderation multiple times successfully.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerModerationId"></param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse<Success> DeletePlayerModerationWithHttpInfo (string playerModerationId)
        {
            // verify the required parameter 'playerModerationId' is set
            if (playerModerationId == null)
                throw new ApiException(400, "Missing required parameter 'playerModerationId' when calling PlayermoderationApi->DeletePlayerModeration");

            var localVarPath = "/auth/user/playermoderations/{playerModerationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playerModerationId != null) localVarPathParams.Add("playerModerationId", this.Configuration.ApiClient.ParameterToString(playerModerationId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePlayerModeration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Delete Player Moderation Deletes a specific player moderation based on it&#39;s &#x60;pmod_&#x60; ID. The website uses &#x60;unmoderateUser&#x60; instead. You can delete the same player moderation multiple times successfully.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerModerationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> DeletePlayerModerationAsync (string playerModerationId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Success> localVarResponse = await DeletePlayerModerationWithHttpInfoAsync(playerModerationId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Player Moderation Deletes a specific player moderation based on it&#39;s &#x60;pmod_&#x60; ID. The website uses &#x60;unmoderateUser&#x60; instead. You can delete the same player moderation multiple times successfully.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerModerationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> DeletePlayerModerationWithHttpInfoAsync (string playerModerationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'playerModerationId' is set
            if (playerModerationId == null)
                throw new ApiException(400, "Missing required parameter 'playerModerationId' when calling PlayermoderationApi->DeletePlayerModeration");

            var localVarPath = "/auth/user/playermoderations/{playerModerationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playerModerationId != null) localVarPathParams.Add("playerModerationId", this.Configuration.ApiClient.ParameterToString(playerModerationId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePlayerModeration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Get Player Moderation Returns a single Player Moderation. This returns the exact same amount of information as the more generalised &#x60;getPlayerModerations&#x60;.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerModerationId"></param>
        /// <returns>PlayerModeration</returns>
        public PlayerModeration GetPlayerModeration (string playerModerationId)
        {
             ApiResponse<PlayerModeration> localVarResponse = GetPlayerModerationWithHttpInfo(playerModerationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Player Moderation Returns a single Player Moderation. This returns the exact same amount of information as the more generalised &#x60;getPlayerModerations&#x60;.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerModerationId"></param>
        /// <returns>ApiResponse of PlayerModeration</returns>
        public ApiResponse<PlayerModeration> GetPlayerModerationWithHttpInfo (string playerModerationId)
        {
            // verify the required parameter 'playerModerationId' is set
            if (playerModerationId == null)
                throw new ApiException(400, "Missing required parameter 'playerModerationId' when calling PlayermoderationApi->GetPlayerModeration");

            var localVarPath = "/auth/user/playermoderations/{playerModerationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playerModerationId != null) localVarPathParams.Add("playerModerationId", this.Configuration.ApiClient.ParameterToString(playerModerationId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerModeration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlayerModeration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlayerModeration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlayerModeration)));
        }

        /// <summary>
        /// Get Player Moderation Returns a single Player Moderation. This returns the exact same amount of information as the more generalised &#x60;getPlayerModerations&#x60;.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerModerationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlayerModeration</returns>
        public async System.Threading.Tasks.Task<PlayerModeration> GetPlayerModerationAsync (string playerModerationId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PlayerModeration> localVarResponse = await GetPlayerModerationWithHttpInfoAsync(playerModerationId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Player Moderation Returns a single Player Moderation. This returns the exact same amount of information as the more generalised &#x60;getPlayerModerations&#x60;.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerModerationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlayerModeration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlayerModeration>> GetPlayerModerationWithHttpInfoAsync (string playerModerationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'playerModerationId' is set
            if (playerModerationId == null)
                throw new ApiException(400, "Missing required parameter 'playerModerationId' when calling PlayermoderationApi->GetPlayerModeration");

            var localVarPath = "/auth/user/playermoderations/{playerModerationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playerModerationId != null) localVarPathParams.Add("playerModerationId", this.Configuration.ApiClient.ParameterToString(playerModerationId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerModeration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlayerModeration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlayerModeration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlayerModeration)));
        }

        /// <summary>
        /// Search Player Moderations Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block. (optional)</param>
        /// <param name="targetUserId">Must be valid UserID. (optional)</param>
        /// <returns>List&lt;PlayerModeration&gt;</returns>
        public List<PlayerModeration> GetPlayerModerations (string type = default(string), string targetUserId = default(string))
        {
             ApiResponse<List<PlayerModeration>> localVarResponse = GetPlayerModerationsWithHttpInfo(type, targetUserId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Player Moderations Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block. (optional)</param>
        /// <param name="targetUserId">Must be valid UserID. (optional)</param>
        /// <returns>ApiResponse of List&lt;PlayerModeration&gt;</returns>
        public ApiResponse<List<PlayerModeration>> GetPlayerModerationsWithHttpInfo (string type = default(string), string targetUserId = default(string))
        {

            var localVarPath = "/auth/user/playermoderations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (targetUserId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetUserId", targetUserId)); // query parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerModerations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PlayerModeration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PlayerModeration>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayerModeration>)));
        }

        /// <summary>
        /// Search Player Moderations Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block. (optional)</param>
        /// <param name="targetUserId">Must be valid UserID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;PlayerModeration&gt;</returns>
        public async System.Threading.Tasks.Task<List<PlayerModeration>> GetPlayerModerationsAsync (string type = default(string), string targetUserId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<PlayerModeration>> localVarResponse = await GetPlayerModerationsWithHttpInfoAsync(type, targetUserId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Player Moderations Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block. (optional)</param>
        /// <param name="targetUserId">Must be valid UserID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;PlayerModeration&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PlayerModeration>>> GetPlayerModerationsWithHttpInfoAsync (string type = default(string), string targetUserId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/auth/user/playermoderations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (targetUserId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetUserId", targetUserId)); // query parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerModerations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PlayerModeration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PlayerModeration>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayerModeration>)));
        }

        /// <summary>
        /// Moderate User Moderate a user, e.g. unmute them or show their avatar.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject12"> (optional)</param>
        /// <returns>PlayerModeration</returns>
        public PlayerModeration ModerateUser (InlineObject12 inlineObject12 = default(InlineObject12))
        {
             ApiResponse<PlayerModeration> localVarResponse = ModerateUserWithHttpInfo(inlineObject12);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Moderate User Moderate a user, e.g. unmute them or show their avatar.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject12"> (optional)</param>
        /// <returns>ApiResponse of PlayerModeration</returns>
        public ApiResponse<PlayerModeration> ModerateUserWithHttpInfo (InlineObject12 inlineObject12 = default(InlineObject12))
        {

            var localVarPath = "/auth/user/playermoderations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineObject12 != null && inlineObject12.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject12); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject12; // byte array
            }

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModerateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlayerModeration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlayerModeration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlayerModeration)));
        }

        /// <summary>
        /// Moderate User Moderate a user, e.g. unmute them or show their avatar.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject12"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlayerModeration</returns>
        public async System.Threading.Tasks.Task<PlayerModeration> ModerateUserAsync (InlineObject12 inlineObject12 = default(InlineObject12), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PlayerModeration> localVarResponse = await ModerateUserWithHttpInfoAsync(inlineObject12, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Moderate User Moderate a user, e.g. unmute them or show their avatar.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject12"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlayerModeration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlayerModeration>> ModerateUserWithHttpInfoAsync (InlineObject12 inlineObject12 = default(InlineObject12), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/auth/user/playermoderations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineObject12 != null && inlineObject12.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject12); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject12; // byte array
            }

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModerateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlayerModeration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlayerModeration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlayerModeration)));
        }

        /// <summary>
        /// Unmoderate User Removes a player moderation previously added through &#x60;moderateUser&#x60;. E.g if you previuosly have shown their avatar, but now want to reset it to default.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject13"> (optional)</param>
        /// <returns>Success</returns>
        public Success UnmoderateUser (InlineObject13 inlineObject13 = default(InlineObject13))
        {
             ApiResponse<Success> localVarResponse = UnmoderateUserWithHttpInfo(inlineObject13);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unmoderate User Removes a player moderation previously added through &#x60;moderateUser&#x60;. E.g if you previuosly have shown their avatar, but now want to reset it to default.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject13"> (optional)</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse<Success> UnmoderateUserWithHttpInfo (InlineObject13 inlineObject13 = default(InlineObject13))
        {

            var localVarPath = "/auth/user/unplayermoderate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineObject13 != null && inlineObject13.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject13); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject13; // byte array
            }

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnmoderateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Unmoderate User Removes a player moderation previously added through &#x60;moderateUser&#x60;. E.g if you previuosly have shown their avatar, but now want to reset it to default.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject13"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> UnmoderateUserAsync (InlineObject13 inlineObject13 = default(InlineObject13), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Success> localVarResponse = await UnmoderateUserWithHttpInfoAsync(inlineObject13, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unmoderate User Removes a player moderation previously added through &#x60;moderateUser&#x60;. E.g if you previuosly have shown their avatar, but now want to reset it to default.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject13"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> UnmoderateUserWithHttpInfoAsync (InlineObject13 inlineObject13 = default(InlineObject13), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/auth/user/unplayermoderate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineObject13 != null && inlineObject13.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject13); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject13; // byte array
            }

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnmoderateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

    }
}
