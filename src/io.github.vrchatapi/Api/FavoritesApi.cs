/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: me@ruby.js.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using io.github.vrchatapi.Client;
using io.github.vrchatapi.Model;

namespace io.github.vrchatapi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFavoritesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Favorite
        /// </summary>
        /// <remarks>
        /// Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatar4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject8"> (optional)</param>
        /// <returns>Favorite</returns>
        Favorite AddFavorite (InlineObject8 inlineObject8 = default(InlineObject8));

        /// <summary>
        /// Add Favorite
        /// </summary>
        /// <remarks>
        /// Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatar4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject8"> (optional)</param>
        /// <returns>ApiResponse of Favorite</returns>
        ApiResponse<Favorite> AddFavoriteWithHttpInfo (InlineObject8 inlineObject8 = default(InlineObject8));
        /// <summary>
        /// Clear Favorite Group
        /// </summary>
        /// <remarks>
        /// Clear ALL contents of a specific favorite group.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <returns>Success</returns>
        Success ClearFavoriteGroup (string favoriteGroupType, string favoriteGroupName, string userId);

        /// <summary>
        /// Clear Favorite Group
        /// </summary>
        /// <remarks>
        /// Clear ALL contents of a specific favorite group.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> ClearFavoriteGroupWithHttpInfo (string favoriteGroupType, string favoriteGroupName, string userId);
        /// <summary>
        /// Show Favorite
        /// </summary>
        /// <remarks>
        /// Return information about a specific Favorite.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId"></param>
        /// <returns>Favorite</returns>
        Favorite GetFavorite (string favoriteId);

        /// <summary>
        /// Show Favorite
        /// </summary>
        /// <remarks>
        /// Return information about a specific Favorite.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId"></param>
        /// <returns>ApiResponse of Favorite</returns>
        ApiResponse<Favorite> GetFavoriteWithHttpInfo (string favoriteId);
        /// <summary>
        /// Show Favorite Group
        /// </summary>
        /// <remarks>
        /// Fetch information about a specific favorite group.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <returns>FavoriteGroup</returns>
        FavoriteGroup GetFavoriteGroup (string favoriteGroupType, string favoriteGroupName, string userId);

        /// <summary>
        /// Show Favorite Group
        /// </summary>
        /// <remarks>
        /// Fetch information about a specific favorite group.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of FavoriteGroup</returns>
        ApiResponse<FavoriteGroup> GetFavoriteGroupWithHttpInfo (string favoriteGroupType, string favoriteGroupName, string userId);
        /// <summary>
        /// List Favorite Groups
        /// </summary>
        /// <remarks>
        /// Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
        /// <returns>List&lt;FavoriteGroup&gt;</returns>
        List<FavoriteGroup> GetFavoriteGroups (int? n = default(int?), int? offset = default(int?), string ownerId = default(string));

        /// <summary>
        /// List Favorite Groups
        /// </summary>
        /// <remarks>
        /// Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
        /// <returns>ApiResponse of List&lt;FavoriteGroup&gt;</returns>
        ApiResponse<List<FavoriteGroup>> GetFavoriteGroupsWithHttpInfo (int? n = default(int?), int? offset = default(int?), string ownerId = default(string));
        /// <summary>
        /// List Favorites
        /// </summary>
        /// <remarks>
        /// Returns a list of favorites.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <returns>List&lt;Favorite&gt;</returns>
        List<Favorite> GetFavorites (int? n = default(int?), int? offset = default(int?), string type = default(string), string tag = default(string));

        /// <summary>
        /// List Favorites
        /// </summary>
        /// <remarks>
        /// Returns a list of favorites.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <returns>ApiResponse of List&lt;Favorite&gt;</returns>
        ApiResponse<List<Favorite>> GetFavoritesWithHttpInfo (int? n = default(int?), int? offset = default(int?), string type = default(string), string tag = default(string));
        /// <summary>
        /// Remove Favorite
        /// </summary>
        /// <remarks>
        /// Remove a favorite from your favorites list.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId"></param>
        /// <returns>Success</returns>
        Success RemoveFavorite (string favoriteId);

        /// <summary>
        /// Remove Favorite
        /// </summary>
        /// <remarks>
        /// Remove a favorite from your favorites list.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId"></param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> RemoveFavoriteWithHttpInfo (string favoriteId);
        /// <summary>
        /// Update Favorite Group
        /// </summary>
        /// <remarks>
        /// Update information about a specific favorite group.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <param name="inlineObject9"> (optional)</param>
        /// <returns></returns>
        void UpdateFavoriteGroup (string favoriteGroupType, string favoriteGroupName, string userId, InlineObject9 inlineObject9 = default(InlineObject9));

        /// <summary>
        /// Update Favorite Group
        /// </summary>
        /// <remarks>
        /// Update information about a specific favorite group.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <param name="inlineObject9"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateFavoriteGroupWithHttpInfo (string favoriteGroupType, string favoriteGroupName, string userId, InlineObject9 inlineObject9 = default(InlineObject9));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add Favorite
        /// </summary>
        /// <remarks>
        /// Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatar4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject8"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Favorite</returns>
        System.Threading.Tasks.Task<Favorite> AddFavoriteAsync (InlineObject8 inlineObject8 = default(InlineObject8), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add Favorite
        /// </summary>
        /// <remarks>
        /// Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatar4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject8"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Favorite)</returns>
        System.Threading.Tasks.Task<ApiResponse<Favorite>> AddFavoriteWithHttpInfoAsync (InlineObject8 inlineObject8 = default(InlineObject8), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Clear Favorite Group
        /// </summary>
        /// <remarks>
        /// Clear ALL contents of a specific favorite group.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> ClearFavoriteGroupAsync (string favoriteGroupType, string favoriteGroupName, string userId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Clear Favorite Group
        /// </summary>
        /// <remarks>
        /// Clear ALL contents of a specific favorite group.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> ClearFavoriteGroupWithHttpInfoAsync (string favoriteGroupType, string favoriteGroupName, string userId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Show Favorite
        /// </summary>
        /// <remarks>
        /// Return information about a specific Favorite.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Favorite</returns>
        System.Threading.Tasks.Task<Favorite> GetFavoriteAsync (string favoriteId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Show Favorite
        /// </summary>
        /// <remarks>
        /// Return information about a specific Favorite.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Favorite)</returns>
        System.Threading.Tasks.Task<ApiResponse<Favorite>> GetFavoriteWithHttpInfoAsync (string favoriteId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Show Favorite Group
        /// </summary>
        /// <remarks>
        /// Fetch information about a specific favorite group.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FavoriteGroup</returns>
        System.Threading.Tasks.Task<FavoriteGroup> GetFavoriteGroupAsync (string favoriteGroupType, string favoriteGroupName, string userId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Show Favorite Group
        /// </summary>
        /// <remarks>
        /// Fetch information about a specific favorite group.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FavoriteGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<FavoriteGroup>> GetFavoriteGroupWithHttpInfoAsync (string favoriteGroupType, string favoriteGroupName, string userId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Favorite Groups
        /// </summary>
        /// <remarks>
        /// Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;FavoriteGroup&gt;</returns>
        System.Threading.Tasks.Task<List<FavoriteGroup>> GetFavoriteGroupsAsync (int? n = default(int?), int? offset = default(int?), string ownerId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Favorite Groups
        /// </summary>
        /// <remarks>
        /// Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;FavoriteGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FavoriteGroup>>> GetFavoriteGroupsWithHttpInfoAsync (int? n = default(int?), int? offset = default(int?), string ownerId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Favorites
        /// </summary>
        /// <remarks>
        /// Returns a list of favorites.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Favorite&gt;</returns>
        System.Threading.Tasks.Task<List<Favorite>> GetFavoritesAsync (int? n = default(int?), int? offset = default(int?), string type = default(string), string tag = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Favorites
        /// </summary>
        /// <remarks>
        /// Returns a list of favorites.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Favorite&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Favorite>>> GetFavoritesWithHttpInfoAsync (int? n = default(int?), int? offset = default(int?), string type = default(string), string tag = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove Favorite
        /// </summary>
        /// <remarks>
        /// Remove a favorite from your favorites list.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> RemoveFavoriteAsync (string favoriteId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove Favorite
        /// </summary>
        /// <remarks>
        /// Remove a favorite from your favorites list.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> RemoveFavoriteWithHttpInfoAsync (string favoriteId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Favorite Group
        /// </summary>
        /// <remarks>
        /// Update information about a specific favorite group.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <param name="inlineObject9"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateFavoriteGroupAsync (string favoriteGroupType, string favoriteGroupName, string userId, InlineObject9 inlineObject9 = default(InlineObject9), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Favorite Group
        /// </summary>
        /// <remarks>
        /// Update information about a specific favorite group.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <param name="inlineObject9"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFavoriteGroupWithHttpInfoAsync (string favoriteGroupType, string favoriteGroupName, string userId, InlineObject9 inlineObject9 = default(InlineObject9), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FavoritesApi : IFavoritesApi
    {
        private io.github.vrchatapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FavoritesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FavoritesApi(String basePath)
        {
            this.Configuration = new io.github.vrchatapi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = io.github.vrchatapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FavoritesApi"/> class
        /// </summary>
        /// <returns></returns>
        public FavoritesApi()
        {
            this.Configuration = io.github.vrchatapi.Client.Configuration.Default;

            ExceptionFactory = io.github.vrchatapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FavoritesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FavoritesApi(io.github.vrchatapi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = io.github.vrchatapi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = io.github.vrchatapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public io.github.vrchatapi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public io.github.vrchatapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add Favorite Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatar4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject8"> (optional)</param>
        /// <returns>Favorite</returns>
        public Favorite AddFavorite (InlineObject8 inlineObject8 = default(InlineObject8))
        {
             ApiResponse<Favorite> localVarResponse = AddFavoriteWithHttpInfo(inlineObject8);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Favorite Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatar4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject8"> (optional)</param>
        /// <returns>ApiResponse of Favorite</returns>
        public ApiResponse<Favorite> AddFavoriteWithHttpInfo (InlineObject8 inlineObject8 = default(InlineObject8))
        {

            var localVarPath = "/favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineObject8 != null && inlineObject8.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject8); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject8; // byte array
            }

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Favorite>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Favorite) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Favorite)));
        }

        /// <summary>
        /// Add Favorite Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatar4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject8"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Favorite</returns>
        public async System.Threading.Tasks.Task<Favorite> AddFavoriteAsync (InlineObject8 inlineObject8 = default(InlineObject8), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Favorite> localVarResponse = await AddFavoriteWithHttpInfoAsync(inlineObject8, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Favorite Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatar4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject8"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Favorite)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Favorite>> AddFavoriteWithHttpInfoAsync (InlineObject8 inlineObject8 = default(InlineObject8), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineObject8 != null && inlineObject8.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject8); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject8; // byte array
            }

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Favorite>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Favorite) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Favorite)));
        }

        /// <summary>
        /// Clear Favorite Group Clear ALL contents of a specific favorite group.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <returns>Success</returns>
        public Success ClearFavoriteGroup (string favoriteGroupType, string favoriteGroupName, string userId)
        {
             ApiResponse<Success> localVarResponse = ClearFavoriteGroupWithHttpInfo(favoriteGroupType, favoriteGroupName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear Favorite Group Clear ALL contents of a specific favorite group.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse<Success> ClearFavoriteGroupWithHttpInfo (string favoriteGroupType, string favoriteGroupName, string userId)
        {
            // verify the required parameter 'favoriteGroupType' is set
            if (favoriteGroupType == null)
                throw new ApiException(400, "Missing required parameter 'favoriteGroupType' when calling FavoritesApi->ClearFavoriteGroup");
            // verify the required parameter 'favoriteGroupName' is set
            if (favoriteGroupName == null)
                throw new ApiException(400, "Missing required parameter 'favoriteGroupName' when calling FavoritesApi->ClearFavoriteGroup");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling FavoritesApi->ClearFavoriteGroup");

            var localVarPath = "/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (favoriteGroupType != null) localVarPathParams.Add("favoriteGroupType", this.Configuration.ApiClient.ParameterToString(favoriteGroupType)); // path parameter
            if (favoriteGroupName != null) localVarPathParams.Add("favoriteGroupName", this.Configuration.ApiClient.ParameterToString(favoriteGroupName)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearFavoriteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Clear Favorite Group Clear ALL contents of a specific favorite group.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> ClearFavoriteGroupAsync (string favoriteGroupType, string favoriteGroupName, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Success> localVarResponse = await ClearFavoriteGroupWithHttpInfoAsync(favoriteGroupType, favoriteGroupName, userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear Favorite Group Clear ALL contents of a specific favorite group.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> ClearFavoriteGroupWithHttpInfoAsync (string favoriteGroupType, string favoriteGroupName, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'favoriteGroupType' is set
            if (favoriteGroupType == null)
                throw new ApiException(400, "Missing required parameter 'favoriteGroupType' when calling FavoritesApi->ClearFavoriteGroup");
            // verify the required parameter 'favoriteGroupName' is set
            if (favoriteGroupName == null)
                throw new ApiException(400, "Missing required parameter 'favoriteGroupName' when calling FavoritesApi->ClearFavoriteGroup");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling FavoritesApi->ClearFavoriteGroup");

            var localVarPath = "/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (favoriteGroupType != null) localVarPathParams.Add("favoriteGroupType", this.Configuration.ApiClient.ParameterToString(favoriteGroupType)); // path parameter
            if (favoriteGroupName != null) localVarPathParams.Add("favoriteGroupName", this.Configuration.ApiClient.ParameterToString(favoriteGroupName)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearFavoriteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Show Favorite Return information about a specific Favorite.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId"></param>
        /// <returns>Favorite</returns>
        public Favorite GetFavorite (string favoriteId)
        {
             ApiResponse<Favorite> localVarResponse = GetFavoriteWithHttpInfo(favoriteId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show Favorite Return information about a specific Favorite.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId"></param>
        /// <returns>ApiResponse of Favorite</returns>
        public ApiResponse<Favorite> GetFavoriteWithHttpInfo (string favoriteId)
        {
            // verify the required parameter 'favoriteId' is set
            if (favoriteId == null)
                throw new ApiException(400, "Missing required parameter 'favoriteId' when calling FavoritesApi->GetFavorite");

            var localVarPath = "/favorites/{favoriteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (favoriteId != null) localVarPathParams.Add("favoriteId", this.Configuration.ApiClient.ParameterToString(favoriteId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Favorite>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Favorite) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Favorite)));
        }

        /// <summary>
        /// Show Favorite Return information about a specific Favorite.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Favorite</returns>
        public async System.Threading.Tasks.Task<Favorite> GetFavoriteAsync (string favoriteId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Favorite> localVarResponse = await GetFavoriteWithHttpInfoAsync(favoriteId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Show Favorite Return information about a specific Favorite.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Favorite)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Favorite>> GetFavoriteWithHttpInfoAsync (string favoriteId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'favoriteId' is set
            if (favoriteId == null)
                throw new ApiException(400, "Missing required parameter 'favoriteId' when calling FavoritesApi->GetFavorite");

            var localVarPath = "/favorites/{favoriteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (favoriteId != null) localVarPathParams.Add("favoriteId", this.Configuration.ApiClient.ParameterToString(favoriteId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Favorite>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Favorite) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Favorite)));
        }

        /// <summary>
        /// Show Favorite Group Fetch information about a specific favorite group.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <returns>FavoriteGroup</returns>
        public FavoriteGroup GetFavoriteGroup (string favoriteGroupType, string favoriteGroupName, string userId)
        {
             ApiResponse<FavoriteGroup> localVarResponse = GetFavoriteGroupWithHttpInfo(favoriteGroupType, favoriteGroupName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show Favorite Group Fetch information about a specific favorite group.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of FavoriteGroup</returns>
        public ApiResponse<FavoriteGroup> GetFavoriteGroupWithHttpInfo (string favoriteGroupType, string favoriteGroupName, string userId)
        {
            // verify the required parameter 'favoriteGroupType' is set
            if (favoriteGroupType == null)
                throw new ApiException(400, "Missing required parameter 'favoriteGroupType' when calling FavoritesApi->GetFavoriteGroup");
            // verify the required parameter 'favoriteGroupName' is set
            if (favoriteGroupName == null)
                throw new ApiException(400, "Missing required parameter 'favoriteGroupName' when calling FavoritesApi->GetFavoriteGroup");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling FavoritesApi->GetFavoriteGroup");

            var localVarPath = "/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (favoriteGroupType != null) localVarPathParams.Add("favoriteGroupType", this.Configuration.ApiClient.ParameterToString(favoriteGroupType)); // path parameter
            if (favoriteGroupName != null) localVarPathParams.Add("favoriteGroupName", this.Configuration.ApiClient.ParameterToString(favoriteGroupName)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavoriteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FavoriteGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FavoriteGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FavoriteGroup)));
        }

        /// <summary>
        /// Show Favorite Group Fetch information about a specific favorite group.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FavoriteGroup</returns>
        public async System.Threading.Tasks.Task<FavoriteGroup> GetFavoriteGroupAsync (string favoriteGroupType, string favoriteGroupName, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FavoriteGroup> localVarResponse = await GetFavoriteGroupWithHttpInfoAsync(favoriteGroupType, favoriteGroupName, userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Show Favorite Group Fetch information about a specific favorite group.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FavoriteGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FavoriteGroup>> GetFavoriteGroupWithHttpInfoAsync (string favoriteGroupType, string favoriteGroupName, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'favoriteGroupType' is set
            if (favoriteGroupType == null)
                throw new ApiException(400, "Missing required parameter 'favoriteGroupType' when calling FavoritesApi->GetFavoriteGroup");
            // verify the required parameter 'favoriteGroupName' is set
            if (favoriteGroupName == null)
                throw new ApiException(400, "Missing required parameter 'favoriteGroupName' when calling FavoritesApi->GetFavoriteGroup");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling FavoritesApi->GetFavoriteGroup");

            var localVarPath = "/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (favoriteGroupType != null) localVarPathParams.Add("favoriteGroupType", this.Configuration.ApiClient.ParameterToString(favoriteGroupType)); // path parameter
            if (favoriteGroupName != null) localVarPathParams.Add("favoriteGroupName", this.Configuration.ApiClient.ParameterToString(favoriteGroupName)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavoriteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FavoriteGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FavoriteGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FavoriteGroup)));
        }

        /// <summary>
        /// List Favorite Groups Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
        /// <returns>List&lt;FavoriteGroup&gt;</returns>
        public List<FavoriteGroup> GetFavoriteGroups (int? n = default(int?), int? offset = default(int?), string ownerId = default(string))
        {
             ApiResponse<List<FavoriteGroup>> localVarResponse = GetFavoriteGroupsWithHttpInfo(n, offset, ownerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Favorite Groups Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
        /// <returns>ApiResponse of List&lt;FavoriteGroup&gt;</returns>
        public ApiResponse<List<FavoriteGroup>> GetFavoriteGroupsWithHttpInfo (int? n = default(int?), int? offset = default(int?), string ownerId = default(string))
        {

            var localVarPath = "/favorite/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (n != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (ownerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ownerId", ownerId)); // query parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavoriteGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FavoriteGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FavoriteGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FavoriteGroup>)));
        }

        /// <summary>
        /// List Favorite Groups Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;FavoriteGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<FavoriteGroup>> GetFavoriteGroupsAsync (int? n = default(int?), int? offset = default(int?), string ownerId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<FavoriteGroup>> localVarResponse = await GetFavoriteGroupsWithHttpInfoAsync(n, offset, ownerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Favorite Groups Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;FavoriteGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FavoriteGroup>>> GetFavoriteGroupsWithHttpInfoAsync (int? n = default(int?), int? offset = default(int?), string ownerId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/favorite/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (n != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (ownerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ownerId", ownerId)); // query parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavoriteGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FavoriteGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FavoriteGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FavoriteGroup>)));
        }

        /// <summary>
        /// List Favorites Returns a list of favorites.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <returns>List&lt;Favorite&gt;</returns>
        public List<Favorite> GetFavorites (int? n = default(int?), int? offset = default(int?), string type = default(string), string tag = default(string))
        {
             ApiResponse<List<Favorite>> localVarResponse = GetFavoritesWithHttpInfo(n, offset, type, tag);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Favorites Returns a list of favorites.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <returns>ApiResponse of List&lt;Favorite&gt;</returns>
        public ApiResponse<List<Favorite>> GetFavoritesWithHttpInfo (int? n = default(int?), int? offset = default(int?), string type = default(string), string tag = default(string))
        {

            var localVarPath = "/favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (n != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavorites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Favorite>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Favorite>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Favorite>)));
        }

        /// <summary>
        /// List Favorites Returns a list of favorites.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Favorite&gt;</returns>
        public async System.Threading.Tasks.Task<List<Favorite>> GetFavoritesAsync (int? n = default(int?), int? offset = default(int?), string type = default(string), string tag = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Favorite>> localVarResponse = await GetFavoritesWithHttpInfoAsync(n, offset, type, tag, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Favorites Returns a list of favorites.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Favorite&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Favorite>>> GetFavoritesWithHttpInfoAsync (int? n = default(int?), int? offset = default(int?), string type = default(string), string tag = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (n != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavorites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Favorite>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Favorite>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Favorite>)));
        }

        /// <summary>
        /// Remove Favorite Remove a favorite from your favorites list.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId"></param>
        /// <returns>Success</returns>
        public Success RemoveFavorite (string favoriteId)
        {
             ApiResponse<Success> localVarResponse = RemoveFavoriteWithHttpInfo(favoriteId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Favorite Remove a favorite from your favorites list.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId"></param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse<Success> RemoveFavoriteWithHttpInfo (string favoriteId)
        {
            // verify the required parameter 'favoriteId' is set
            if (favoriteId == null)
                throw new ApiException(400, "Missing required parameter 'favoriteId' when calling FavoritesApi->RemoveFavorite");

            var localVarPath = "/favorites/{favoriteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (favoriteId != null) localVarPathParams.Add("favoriteId", this.Configuration.ApiClient.ParameterToString(favoriteId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Remove Favorite Remove a favorite from your favorites list.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> RemoveFavoriteAsync (string favoriteId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Success> localVarResponse = await RemoveFavoriteWithHttpInfoAsync(favoriteId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Favorite Remove a favorite from your favorites list.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> RemoveFavoriteWithHttpInfoAsync (string favoriteId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'favoriteId' is set
            if (favoriteId == null)
                throw new ApiException(400, "Missing required parameter 'favoriteId' when calling FavoritesApi->RemoveFavorite");

            var localVarPath = "/favorites/{favoriteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (favoriteId != null) localVarPathParams.Add("favoriteId", this.Configuration.ApiClient.ParameterToString(favoriteId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update Favorite Group Update information about a specific favorite group.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <param name="inlineObject9"> (optional)</param>
        /// <returns></returns>
        public void UpdateFavoriteGroup (string favoriteGroupType, string favoriteGroupName, string userId, InlineObject9 inlineObject9 = default(InlineObject9))
        {
             UpdateFavoriteGroupWithHttpInfo(favoriteGroupType, favoriteGroupName, userId, inlineObject9);
        }

        /// <summary>
        /// Update Favorite Group Update information about a specific favorite group.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <param name="inlineObject9"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateFavoriteGroupWithHttpInfo (string favoriteGroupType, string favoriteGroupName, string userId, InlineObject9 inlineObject9 = default(InlineObject9))
        {
            // verify the required parameter 'favoriteGroupType' is set
            if (favoriteGroupType == null)
                throw new ApiException(400, "Missing required parameter 'favoriteGroupType' when calling FavoritesApi->UpdateFavoriteGroup");
            // verify the required parameter 'favoriteGroupName' is set
            if (favoriteGroupName == null)
                throw new ApiException(400, "Missing required parameter 'favoriteGroupName' when calling FavoritesApi->UpdateFavoriteGroup");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling FavoritesApi->UpdateFavoriteGroup");

            var localVarPath = "/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (favoriteGroupType != null) localVarPathParams.Add("favoriteGroupType", this.Configuration.ApiClient.ParameterToString(favoriteGroupType)); // path parameter
            if (favoriteGroupName != null) localVarPathParams.Add("favoriteGroupName", this.Configuration.ApiClient.ParameterToString(favoriteGroupName)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (inlineObject9 != null && inlineObject9.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject9); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject9; // byte array
            }

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFavoriteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Favorite Group Update information about a specific favorite group.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <param name="inlineObject9"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateFavoriteGroupAsync (string favoriteGroupType, string favoriteGroupName, string userId, InlineObject9 inlineObject9 = default(InlineObject9), CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateFavoriteGroupWithHttpInfoAsync(favoriteGroupType, favoriteGroupName, userId, inlineObject9, cancellationToken);

        }

        /// <summary>
        /// Update Favorite Group Update information about a specific favorite group.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName"></param>
        /// <param name="userId"></param>
        /// <param name="inlineObject9"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFavoriteGroupWithHttpInfoAsync (string favoriteGroupType, string favoriteGroupName, string userId, InlineObject9 inlineObject9 = default(InlineObject9), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'favoriteGroupType' is set
            if (favoriteGroupType == null)
                throw new ApiException(400, "Missing required parameter 'favoriteGroupType' when calling FavoritesApi->UpdateFavoriteGroup");
            // verify the required parameter 'favoriteGroupName' is set
            if (favoriteGroupName == null)
                throw new ApiException(400, "Missing required parameter 'favoriteGroupName' when calling FavoritesApi->UpdateFavoriteGroup");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling FavoritesApi->UpdateFavoriteGroup");

            var localVarPath = "/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (favoriteGroupType != null) localVarPathParams.Add("favoriteGroupType", this.Configuration.ApiClient.ParameterToString(favoriteGroupType)); // path parameter
            if (favoriteGroupName != null) localVarPathParams.Add("favoriteGroupName", this.Configuration.ApiClient.ParameterToString(favoriteGroupName)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (inlineObject9 != null && inlineObject9.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject9); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject9; // byte array
            }

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFavoriteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
