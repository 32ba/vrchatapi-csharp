/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: me@ruby.js.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using io.github.vrchatapi.Client;
using io.github.vrchatapi.Model;

namespace io.github.vrchatapi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorldsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create World
        /// </summary>
        /// <remarks>
        /// Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorldRequest"> (optional)</param>
        /// <returns>World</returns>
        World CreateWorld (CreateWorldRequest createWorldRequest = default(CreateWorldRequest));

        /// <summary>
        /// Create World
        /// </summary>
        /// <remarks>
        /// Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorldRequest"> (optional)</param>
        /// <returns>ApiResponse of World</returns>
        ApiResponse<World> CreateWorldWithHttpInfo (CreateWorldRequest createWorldRequest = default(CreateWorldRequest));
        /// <summary>
        /// Delete World
        /// </summary>
        /// <remarks>
        /// Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns></returns>
        void DeleteWorld (string worldId);

        /// <summary>
        /// Delete World
        /// </summary>
        /// <remarks>
        /// Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWorldWithHttpInfo (string worldId);
        /// <summary>
        /// List Active Worlds
        /// </summary>
        /// <remarks>
        /// Search and list currently Active worlds by query filters.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <returns>List&lt;LimitedWorld&gt;</returns>
        List<LimitedWorld> GetActiveWorlds (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string));

        /// <summary>
        /// List Active Worlds
        /// </summary>
        /// <remarks>
        /// Search and list currently Active worlds by query filters.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <returns>ApiResponse of List&lt;LimitedWorld&gt;</returns>
        ApiResponse<List<LimitedWorld>> GetActiveWorldsWithHttpInfo (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string));
        /// <summary>
        /// List Favorited Worlds
        /// </summary>
        /// <remarks>
        /// Search and list favorited worlds by query filters.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <returns>List&lt;LimitedWorld&gt;</returns>
        List<LimitedWorld> GetFavoritedWorlds (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), string userId = default(string));

        /// <summary>
        /// List Favorited Worlds
        /// </summary>
        /// <remarks>
        /// Search and list favorited worlds by query filters.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <returns>ApiResponse of List&lt;LimitedWorld&gt;</returns>
        ApiResponse<List<LimitedWorld>> GetFavoritedWorldsWithHttpInfo (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), string userId = default(string));
        /// <summary>
        /// List Recent Worlds
        /// </summary>
        /// <remarks>
        /// Search and list recently visited worlds by query filters.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <returns>List&lt;LimitedWorld&gt;</returns>
        List<LimitedWorld> GetRecentWorlds (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), string userId = default(string));

        /// <summary>
        /// List Recent Worlds
        /// </summary>
        /// <remarks>
        /// Search and list recently visited worlds by query filters.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <returns>ApiResponse of List&lt;LimitedWorld&gt;</returns>
        ApiResponse<List<LimitedWorld>> GetRecentWorldsWithHttpInfo (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), string userId = default(string));
        /// <summary>
        /// Get World by ID
        /// </summary>
        /// <remarks>
        /// Get information about a specific World.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns>World</returns>
        World GetWorld (string worldId);

        /// <summary>
        /// Get World by ID
        /// </summary>
        /// <remarks>
        /// Get information about a specific World.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns>ApiResponse of World</returns>
        ApiResponse<World> GetWorldWithHttpInfo (string worldId);
        /// <summary>
        /// Get World Instance
        /// </summary>
        /// <remarks>
        /// Returns a worlds instance.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <returns>Instance</returns>
        Instance GetWorldInstance (string worldId, string instanceId);

        /// <summary>
        /// Get World Instance
        /// </summary>
        /// <remarks>
        /// Returns a worlds instance.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <returns>ApiResponse of Instance</returns>
        ApiResponse<Instance> GetWorldInstanceWithHttpInfo (string worldId, string instanceId);
        /// <summary>
        /// Get World Metadata
        /// </summary>
        /// <remarks>
        /// Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns>WorldMetadata</returns>
        [Obsolete]
        WorldMetadata GetWorldMetadata (string worldId);

        /// <summary>
        /// Get World Metadata
        /// </summary>
        /// <remarks>
        /// Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns>ApiResponse of WorldMetadata</returns>
        [Obsolete]
        ApiResponse<WorldMetadata> GetWorldMetadataWithHttpInfo (string worldId);
        /// <summary>
        /// Get World Publish Status
        /// </summary>
        /// <remarks>
        /// Returns a worlds publish status.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns>WorldPublishStatus</returns>
        WorldPublishStatus GetWorldPublishStatus (string worldId);

        /// <summary>
        /// Get World Publish Status
        /// </summary>
        /// <remarks>
        /// Returns a worlds publish status.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns>ApiResponse of WorldPublishStatus</returns>
        ApiResponse<WorldPublishStatus> GetWorldPublishStatusWithHttpInfo (string worldId);
        /// <summary>
        /// Publish World
        /// </summary>
        /// <remarks>
        /// Publish a world. You can only publish one world per week.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns></returns>
        void PublishWorld (string worldId);

        /// <summary>
        /// Publish World
        /// </summary>
        /// <remarks>
        /// Publish a world. You can only publish one world per week.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PublishWorldWithHttpInfo (string worldId);
        /// <summary>
        /// Search All Worlds
        /// </summary>
        /// <remarks>
        /// Search and list any worlds by query filters.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="user">Set to &#x60;me&#x60; for searching own worlds. (optional)</param>
        /// <param name="userId">Filter by UserID. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <returns>List&lt;LimitedWorld&gt;</returns>
        List<LimitedWorld> SearchWorlds (string featured = default(string), string sort = default(string), string user = default(string), string userId = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string));

        /// <summary>
        /// Search All Worlds
        /// </summary>
        /// <remarks>
        /// Search and list any worlds by query filters.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="user">Set to &#x60;me&#x60; for searching own worlds. (optional)</param>
        /// <param name="userId">Filter by UserID. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <returns>ApiResponse of List&lt;LimitedWorld&gt;</returns>
        ApiResponse<List<LimitedWorld>> SearchWorldsWithHttpInfo (string featured = default(string), string sort = default(string), string user = default(string), string userId = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string));
        /// <summary>
        /// Unpublish World
        /// </summary>
        /// <remarks>
        /// Unpublish a world.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns></returns>
        void UnpublishWorld (string worldId);

        /// <summary>
        /// Unpublish World
        /// </summary>
        /// <remarks>
        /// Unpublish a world.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnpublishWorldWithHttpInfo (string worldId);
        /// <summary>
        /// Update World
        /// </summary>
        /// <remarks>
        /// Update information about a specific World.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="updateWorldRequest"> (optional)</param>
        /// <returns>World</returns>
        World UpdateWorld (string worldId, UpdateWorldRequest updateWorldRequest = default(UpdateWorldRequest));

        /// <summary>
        /// Update World
        /// </summary>
        /// <remarks>
        /// Update information about a specific World.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="updateWorldRequest"> (optional)</param>
        /// <returns>ApiResponse of World</returns>
        ApiResponse<World> UpdateWorldWithHttpInfo (string worldId, UpdateWorldRequest updateWorldRequest = default(UpdateWorldRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create World
        /// </summary>
        /// <remarks>
        /// Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorldRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of World</returns>
        System.Threading.Tasks.Task<World> CreateWorldAsync (CreateWorldRequest createWorldRequest = default(CreateWorldRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create World
        /// </summary>
        /// <remarks>
        /// Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorldRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (World)</returns>
        System.Threading.Tasks.Task<ApiResponse<World>> CreateWorldWithHttpInfoAsync (CreateWorldRequest createWorldRequest = default(CreateWorldRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete World
        /// </summary>
        /// <remarks>
        /// Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWorldAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete World
        /// </summary>
        /// <remarks>
        /// Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorldWithHttpInfoAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Active Worlds
        /// </summary>
        /// <remarks>
        /// Search and list currently Active worlds by query filters.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;LimitedWorld&gt;</returns>
        System.Threading.Tasks.Task<List<LimitedWorld>> GetActiveWorldsAsync (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Active Worlds
        /// </summary>
        /// <remarks>
        /// Search and list currently Active worlds by query filters.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;LimitedWorld&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LimitedWorld>>> GetActiveWorldsWithHttpInfoAsync (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Favorited Worlds
        /// </summary>
        /// <remarks>
        /// Search and list favorited worlds by query filters.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;LimitedWorld&gt;</returns>
        System.Threading.Tasks.Task<List<LimitedWorld>> GetFavoritedWorldsAsync (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), string userId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Favorited Worlds
        /// </summary>
        /// <remarks>
        /// Search and list favorited worlds by query filters.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;LimitedWorld&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LimitedWorld>>> GetFavoritedWorldsWithHttpInfoAsync (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), string userId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Recent Worlds
        /// </summary>
        /// <remarks>
        /// Search and list recently visited worlds by query filters.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;LimitedWorld&gt;</returns>
        System.Threading.Tasks.Task<List<LimitedWorld>> GetRecentWorldsAsync (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), string userId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Recent Worlds
        /// </summary>
        /// <remarks>
        /// Search and list recently visited worlds by query filters.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;LimitedWorld&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LimitedWorld>>> GetRecentWorldsWithHttpInfoAsync (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), string userId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get World by ID
        /// </summary>
        /// <remarks>
        /// Get information about a specific World.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of World</returns>
        System.Threading.Tasks.Task<World> GetWorldAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get World by ID
        /// </summary>
        /// <remarks>
        /// Get information about a specific World.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (World)</returns>
        System.Threading.Tasks.Task<ApiResponse<World>> GetWorldWithHttpInfoAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get World Instance
        /// </summary>
        /// <remarks>
        /// Returns a worlds instance.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Instance</returns>
        System.Threading.Tasks.Task<Instance> GetWorldInstanceAsync (string worldId, string instanceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get World Instance
        /// </summary>
        /// <remarks>
        /// Returns a worlds instance.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Instance)</returns>
        System.Threading.Tasks.Task<ApiResponse<Instance>> GetWorldInstanceWithHttpInfoAsync (string worldId, string instanceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get World Metadata
        /// </summary>
        /// <remarks>
        /// Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorldMetadata</returns>
        [Obsolete]
        System.Threading.Tasks.Task<WorldMetadata> GetWorldMetadataAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get World Metadata
        /// </summary>
        /// <remarks>
        /// Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorldMetadata)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<WorldMetadata>> GetWorldMetadataWithHttpInfoAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get World Publish Status
        /// </summary>
        /// <remarks>
        /// Returns a worlds publish status.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorldPublishStatus</returns>
        System.Threading.Tasks.Task<WorldPublishStatus> GetWorldPublishStatusAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get World Publish Status
        /// </summary>
        /// <remarks>
        /// Returns a worlds publish status.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorldPublishStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorldPublishStatus>> GetWorldPublishStatusWithHttpInfoAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Publish World
        /// </summary>
        /// <remarks>
        /// Publish a world. You can only publish one world per week.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PublishWorldAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Publish World
        /// </summary>
        /// <remarks>
        /// Publish a world. You can only publish one world per week.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PublishWorldWithHttpInfoAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search All Worlds
        /// </summary>
        /// <remarks>
        /// Search and list any worlds by query filters.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="user">Set to &#x60;me&#x60; for searching own worlds. (optional)</param>
        /// <param name="userId">Filter by UserID. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;LimitedWorld&gt;</returns>
        System.Threading.Tasks.Task<List<LimitedWorld>> SearchWorldsAsync (string featured = default(string), string sort = default(string), string user = default(string), string userId = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search All Worlds
        /// </summary>
        /// <remarks>
        /// Search and list any worlds by query filters.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="user">Set to &#x60;me&#x60; for searching own worlds. (optional)</param>
        /// <param name="userId">Filter by UserID. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;LimitedWorld&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LimitedWorld>>> SearchWorldsWithHttpInfoAsync (string featured = default(string), string sort = default(string), string user = default(string), string userId = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Unpublish World
        /// </summary>
        /// <remarks>
        /// Unpublish a world.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnpublishWorldAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unpublish World
        /// </summary>
        /// <remarks>
        /// Unpublish a world.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnpublishWorldWithHttpInfoAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update World
        /// </summary>
        /// <remarks>
        /// Update information about a specific World.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="updateWorldRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of World</returns>
        System.Threading.Tasks.Task<World> UpdateWorldAsync (string worldId, UpdateWorldRequest updateWorldRequest = default(UpdateWorldRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update World
        /// </summary>
        /// <remarks>
        /// Update information about a specific World.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="updateWorldRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (World)</returns>
        System.Threading.Tasks.Task<ApiResponse<World>> UpdateWorldWithHttpInfoAsync (string worldId, UpdateWorldRequest updateWorldRequest = default(UpdateWorldRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorldsApi : IWorldsApi
    {
        private io.github.vrchatapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorldsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorldsApi(String basePath)
        {
            this.Configuration = new io.github.vrchatapi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = io.github.vrchatapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorldsApi"/> class
        /// </summary>
        /// <returns></returns>
        public WorldsApi()
        {
            this.Configuration = io.github.vrchatapi.Client.Configuration.Default;

            ExceptionFactory = io.github.vrchatapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorldsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorldsApi(io.github.vrchatapi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = io.github.vrchatapi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = io.github.vrchatapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public io.github.vrchatapi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public io.github.vrchatapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create World Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorldRequest"> (optional)</param>
        /// <returns>World</returns>
        public World CreateWorld (CreateWorldRequest createWorldRequest = default(CreateWorldRequest))
        {
             ApiResponse<World> localVarResponse = CreateWorldWithHttpInfo(createWorldRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create World Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorldRequest"> (optional)</param>
        /// <returns>ApiResponse of World</returns>
        public ApiResponse<World> CreateWorldWithHttpInfo (CreateWorldRequest createWorldRequest = default(CreateWorldRequest))
        {

            var localVarPath = "/worlds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createWorldRequest != null && createWorldRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createWorldRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createWorldRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<World>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (World) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(World)));
        }

        /// <summary>
        /// Create World Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorldRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of World</returns>
        public async System.Threading.Tasks.Task<World> CreateWorldAsync (CreateWorldRequest createWorldRequest = default(CreateWorldRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<World> localVarResponse = await CreateWorldWithHttpInfoAsync(createWorldRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create World Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorldRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (World)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<World>> CreateWorldWithHttpInfoAsync (CreateWorldRequest createWorldRequest = default(CreateWorldRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/worlds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createWorldRequest != null && createWorldRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createWorldRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createWorldRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<World>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (World) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(World)));
        }

        /// <summary>
        /// Delete World Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns></returns>
        public void DeleteWorld (string worldId)
        {
             DeleteWorldWithHttpInfo(worldId);
        }

        /// <summary>
        /// Delete World Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWorldWithHttpInfo (string worldId)
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling WorldsApi->DeleteWorld");

            var localVarPath = "/worlds/{worldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete World Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWorldAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteWorldWithHttpInfoAsync(worldId, cancellationToken);

        }

        /// <summary>
        /// Delete World Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorldWithHttpInfoAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling WorldsApi->DeleteWorld");

            var localVarPath = "/worlds/{worldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List Active Worlds Search and list currently Active worlds by query filters.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <returns>List&lt;LimitedWorld&gt;</returns>
        public List<LimitedWorld> GetActiveWorlds (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string))
        {
             ApiResponse<List<LimitedWorld>> localVarResponse = GetActiveWorldsWithHttpInfo(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Active Worlds Search and list currently Active worlds by query filters.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <returns>ApiResponse of List&lt;LimitedWorld&gt;</returns>
        public ApiResponse<List<LimitedWorld>> GetActiveWorldsWithHttpInfo (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string))
        {

            var localVarPath = "/worlds/active";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featured != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "featured", featured)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (n != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (notag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notag", notag)); // query parameter
            if (releaseStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "releaseStatus", releaseStatus)); // query parameter
            if (maxUnityVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxUnityVersion", maxUnityVersion)); // query parameter
            if (minUnityVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minUnityVersion", minUnityVersion)); // query parameter
            if (platform != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "platform", platform)); // query parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActiveWorlds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LimitedWorld>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LimitedWorld>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LimitedWorld>)));
        }

        /// <summary>
        /// List Active Worlds Search and list currently Active worlds by query filters.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;LimitedWorld&gt;</returns>
        public async System.Threading.Tasks.Task<List<LimitedWorld>> GetActiveWorldsAsync (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<LimitedWorld>> localVarResponse = await GetActiveWorldsWithHttpInfoAsync(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Active Worlds Search and list currently Active worlds by query filters.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;LimitedWorld&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LimitedWorld>>> GetActiveWorldsWithHttpInfoAsync (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/worlds/active";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featured != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "featured", featured)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (n != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (notag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notag", notag)); // query parameter
            if (releaseStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "releaseStatus", releaseStatus)); // query parameter
            if (maxUnityVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxUnityVersion", maxUnityVersion)); // query parameter
            if (minUnityVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minUnityVersion", minUnityVersion)); // query parameter
            if (platform != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "platform", platform)); // query parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActiveWorlds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LimitedWorld>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LimitedWorld>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LimitedWorld>)));
        }

        /// <summary>
        /// List Favorited Worlds Search and list favorited worlds by query filters.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <returns>List&lt;LimitedWorld&gt;</returns>
        public List<LimitedWorld> GetFavoritedWorlds (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), string userId = default(string))
        {
             ApiResponse<List<LimitedWorld>> localVarResponse = GetFavoritedWorldsWithHttpInfo(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Favorited Worlds Search and list favorited worlds by query filters.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <returns>ApiResponse of List&lt;LimitedWorld&gt;</returns>
        public ApiResponse<List<LimitedWorld>> GetFavoritedWorldsWithHttpInfo (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), string userId = default(string))
        {

            var localVarPath = "/worlds/favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featured != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "featured", featured)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (n != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (notag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notag", notag)); // query parameter
            if (releaseStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "releaseStatus", releaseStatus)); // query parameter
            if (maxUnityVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxUnityVersion", maxUnityVersion)); // query parameter
            if (minUnityVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minUnityVersion", minUnityVersion)); // query parameter
            if (platform != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "platform", platform)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavoritedWorlds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LimitedWorld>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LimitedWorld>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LimitedWorld>)));
        }

        /// <summary>
        /// List Favorited Worlds Search and list favorited worlds by query filters.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;LimitedWorld&gt;</returns>
        public async System.Threading.Tasks.Task<List<LimitedWorld>> GetFavoritedWorldsAsync (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<LimitedWorld>> localVarResponse = await GetFavoritedWorldsWithHttpInfoAsync(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Favorited Worlds Search and list favorited worlds by query filters.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;LimitedWorld&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LimitedWorld>>> GetFavoritedWorldsWithHttpInfoAsync (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/worlds/favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featured != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "featured", featured)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (n != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (notag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notag", notag)); // query parameter
            if (releaseStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "releaseStatus", releaseStatus)); // query parameter
            if (maxUnityVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxUnityVersion", maxUnityVersion)); // query parameter
            if (minUnityVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minUnityVersion", minUnityVersion)); // query parameter
            if (platform != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "platform", platform)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavoritedWorlds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LimitedWorld>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LimitedWorld>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LimitedWorld>)));
        }

        /// <summary>
        /// List Recent Worlds Search and list recently visited worlds by query filters.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <returns>List&lt;LimitedWorld&gt;</returns>
        public List<LimitedWorld> GetRecentWorlds (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), string userId = default(string))
        {
             ApiResponse<List<LimitedWorld>> localVarResponse = GetRecentWorldsWithHttpInfo(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Recent Worlds Search and list recently visited worlds by query filters.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <returns>ApiResponse of List&lt;LimitedWorld&gt;</returns>
        public ApiResponse<List<LimitedWorld>> GetRecentWorldsWithHttpInfo (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), string userId = default(string))
        {

            var localVarPath = "/worlds/recent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featured != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "featured", featured)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (n != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (notag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notag", notag)); // query parameter
            if (releaseStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "releaseStatus", releaseStatus)); // query parameter
            if (maxUnityVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxUnityVersion", maxUnityVersion)); // query parameter
            if (minUnityVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minUnityVersion", minUnityVersion)); // query parameter
            if (platform != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "platform", platform)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecentWorlds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LimitedWorld>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LimitedWorld>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LimitedWorld>)));
        }

        /// <summary>
        /// List Recent Worlds Search and list recently visited worlds by query filters.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;LimitedWorld&gt;</returns>
        public async System.Threading.Tasks.Task<List<LimitedWorld>> GetRecentWorldsAsync (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<LimitedWorld>> localVarResponse = await GetRecentWorldsWithHttpInfoAsync(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Recent Worlds Search and list recently visited worlds by query filters.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;LimitedWorld&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LimitedWorld>>> GetRecentWorldsWithHttpInfoAsync (string featured = default(string), string sort = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/worlds/recent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featured != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "featured", featured)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (n != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (notag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notag", notag)); // query parameter
            if (releaseStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "releaseStatus", releaseStatus)); // query parameter
            if (maxUnityVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxUnityVersion", maxUnityVersion)); // query parameter
            if (minUnityVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minUnityVersion", minUnityVersion)); // query parameter
            if (platform != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "platform", platform)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecentWorlds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LimitedWorld>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LimitedWorld>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LimitedWorld>)));
        }

        /// <summary>
        /// Get World by ID Get information about a specific World.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns>World</returns>
        public World GetWorld (string worldId)
        {
             ApiResponse<World> localVarResponse = GetWorldWithHttpInfo(worldId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get World by ID Get information about a specific World.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns>ApiResponse of World</returns>
        public ApiResponse<World> GetWorldWithHttpInfo (string worldId)
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling WorldsApi->GetWorld");

            var localVarPath = "/worlds/{worldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter

            // authentication (apiKeyCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<World>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (World) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(World)));
        }

        /// <summary>
        /// Get World by ID Get information about a specific World.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of World</returns>
        public async System.Threading.Tasks.Task<World> GetWorldAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<World> localVarResponse = await GetWorldWithHttpInfoAsync(worldId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get World by ID Get information about a specific World.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (World)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<World>> GetWorldWithHttpInfoAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling WorldsApi->GetWorld");

            var localVarPath = "/worlds/{worldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter

            // authentication (apiKeyCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<World>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (World) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(World)));
        }

        /// <summary>
        /// Get World Instance Returns a worlds instance.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <returns>Instance</returns>
        public Instance GetWorldInstance (string worldId, string instanceId)
        {
             ApiResponse<Instance> localVarResponse = GetWorldInstanceWithHttpInfo(worldId, instanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get World Instance Returns a worlds instance.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <returns>ApiResponse of Instance</returns>
        public ApiResponse<Instance> GetWorldInstanceWithHttpInfo (string worldId, string instanceId)
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling WorldsApi->GetWorldInstance");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling WorldsApi->GetWorldInstance");

            var localVarPath = "/worlds/{worldId}/{instanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorldInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Instance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Instance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Instance)));
        }

        /// <summary>
        /// Get World Instance Returns a worlds instance.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Instance</returns>
        public async System.Threading.Tasks.Task<Instance> GetWorldInstanceAsync (string worldId, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Instance> localVarResponse = await GetWorldInstanceWithHttpInfoAsync(worldId, instanceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get World Instance Returns a worlds instance.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Instance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Instance>> GetWorldInstanceWithHttpInfoAsync (string worldId, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling WorldsApi->GetWorldInstance");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling WorldsApi->GetWorldInstance");

            var localVarPath = "/worlds/{worldId}/{instanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorldInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Instance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Instance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Instance)));
        }

        /// <summary>
        /// Get World Metadata Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns>WorldMetadata</returns>
        [Obsolete]
        public WorldMetadata GetWorldMetadata (string worldId)
        {
             ApiResponse<WorldMetadata> localVarResponse = GetWorldMetadataWithHttpInfo(worldId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get World Metadata Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns>ApiResponse of WorldMetadata</returns>
        [Obsolete]
        public ApiResponse<WorldMetadata> GetWorldMetadataWithHttpInfo (string worldId)
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling WorldsApi->GetWorldMetadata");

            var localVarPath = "/worlds/{worldId}/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorldMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorldMetadata) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldMetadata)));
        }

        /// <summary>
        /// Get World Metadata Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorldMetadata</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<WorldMetadata> GetWorldMetadataAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WorldMetadata> localVarResponse = await GetWorldMetadataWithHttpInfoAsync(worldId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get World Metadata Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorldMetadata)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<WorldMetadata>> GetWorldMetadataWithHttpInfoAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling WorldsApi->GetWorldMetadata");

            var localVarPath = "/worlds/{worldId}/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorldMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorldMetadata) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldMetadata)));
        }

        /// <summary>
        /// Get World Publish Status Returns a worlds publish status.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns>WorldPublishStatus</returns>
        public WorldPublishStatus GetWorldPublishStatus (string worldId)
        {
             ApiResponse<WorldPublishStatus> localVarResponse = GetWorldPublishStatusWithHttpInfo(worldId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get World Publish Status Returns a worlds publish status.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns>ApiResponse of WorldPublishStatus</returns>
        public ApiResponse<WorldPublishStatus> GetWorldPublishStatusWithHttpInfo (string worldId)
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling WorldsApi->GetWorldPublishStatus");

            var localVarPath = "/worlds/{worldId}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorldPublishStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldPublishStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorldPublishStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldPublishStatus)));
        }

        /// <summary>
        /// Get World Publish Status Returns a worlds publish status.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorldPublishStatus</returns>
        public async System.Threading.Tasks.Task<WorldPublishStatus> GetWorldPublishStatusAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WorldPublishStatus> localVarResponse = await GetWorldPublishStatusWithHttpInfoAsync(worldId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get World Publish Status Returns a worlds publish status.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorldPublishStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorldPublishStatus>> GetWorldPublishStatusWithHttpInfoAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling WorldsApi->GetWorldPublishStatus");

            var localVarPath = "/worlds/{worldId}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorldPublishStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldPublishStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorldPublishStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldPublishStatus)));
        }

        /// <summary>
        /// Publish World Publish a world. You can only publish one world per week.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns></returns>
        public void PublishWorld (string worldId)
        {
             PublishWorldWithHttpInfo(worldId);
        }

        /// <summary>
        /// Publish World Publish a world. You can only publish one world per week.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PublishWorldWithHttpInfo (string worldId)
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling WorldsApi->PublishWorld");

            var localVarPath = "/worlds/{worldId}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Publish World Publish a world. You can only publish one world per week.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PublishWorldAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await PublishWorldWithHttpInfoAsync(worldId, cancellationToken);

        }

        /// <summary>
        /// Publish World Publish a world. You can only publish one world per week.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PublishWorldWithHttpInfoAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling WorldsApi->PublishWorld");

            var localVarPath = "/worlds/{worldId}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Search All Worlds Search and list any worlds by query filters.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="user">Set to &#x60;me&#x60; for searching own worlds. (optional)</param>
        /// <param name="userId">Filter by UserID. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <returns>List&lt;LimitedWorld&gt;</returns>
        public List<LimitedWorld> SearchWorlds (string featured = default(string), string sort = default(string), string user = default(string), string userId = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string))
        {
             ApiResponse<List<LimitedWorld>> localVarResponse = SearchWorldsWithHttpInfo(featured, sort, user, userId, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search All Worlds Search and list any worlds by query filters.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="user">Set to &#x60;me&#x60; for searching own worlds. (optional)</param>
        /// <param name="userId">Filter by UserID. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <returns>ApiResponse of List&lt;LimitedWorld&gt;</returns>
        public ApiResponse<List<LimitedWorld>> SearchWorldsWithHttpInfo (string featured = default(string), string sort = default(string), string user = default(string), string userId = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string))
        {

            var localVarPath = "/worlds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featured != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "featured", featured)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (user != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user", user)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (n != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (notag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notag", notag)); // query parameter
            if (releaseStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "releaseStatus", releaseStatus)); // query parameter
            if (maxUnityVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxUnityVersion", maxUnityVersion)); // query parameter
            if (minUnityVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minUnityVersion", minUnityVersion)); // query parameter
            if (platform != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "platform", platform)); // query parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchWorlds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LimitedWorld>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LimitedWorld>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LimitedWorld>)));
        }

        /// <summary>
        /// Search All Worlds Search and list any worlds by query filters.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="user">Set to &#x60;me&#x60; for searching own worlds. (optional)</param>
        /// <param name="userId">Filter by UserID. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;LimitedWorld&gt;</returns>
        public async System.Threading.Tasks.Task<List<LimitedWorld>> SearchWorldsAsync (string featured = default(string), string sort = default(string), string user = default(string), string userId = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<LimitedWorld>> localVarResponse = await SearchWorldsWithHttpInfoAsync(featured, sort, user, userId, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search All Worlds Search and list any worlds by query filters.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featured">Filters on featured results. (optional)</param>
        /// <param name="sort"> (optional, default to popularity)</param>
        /// <param name="user">Set to &#x60;me&#x60; for searching own worlds. (optional)</param>
        /// <param name="userId">Filter by UserID. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="order"> (optional, default to descending)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="search">Filters by world name. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). (optional)</param>
        /// <param name="notag">Tags to exclude (comma-separated). (optional)</param>
        /// <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
        /// <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
        /// <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
        /// <param name="platform">The platform the asset supports. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;LimitedWorld&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LimitedWorld>>> SearchWorldsWithHttpInfoAsync (string featured = default(string), string sort = default(string), string user = default(string), string userId = default(string), int? n = default(int?), string order = default(string), int? offset = default(int?), string search = default(string), string tag = default(string), string notag = default(string), string releaseStatus = default(string), string maxUnityVersion = default(string), string minUnityVersion = default(string), string platform = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/worlds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featured != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "featured", featured)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (user != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user", user)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (n != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (notag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notag", notag)); // query parameter
            if (releaseStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "releaseStatus", releaseStatus)); // query parameter
            if (maxUnityVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxUnityVersion", maxUnityVersion)); // query parameter
            if (minUnityVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minUnityVersion", minUnityVersion)); // query parameter
            if (platform != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "platform", platform)); // query parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchWorlds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LimitedWorld>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LimitedWorld>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LimitedWorld>)));
        }

        /// <summary>
        /// Unpublish World Unpublish a world.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns></returns>
        public void UnpublishWorld (string worldId)
        {
             UnpublishWorldWithHttpInfo(worldId);
        }

        /// <summary>
        /// Unpublish World Unpublish a world.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnpublishWorldWithHttpInfo (string worldId)
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling WorldsApi->UnpublishWorld");

            var localVarPath = "/worlds/{worldId}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnpublishWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unpublish World Unpublish a world.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnpublishWorldAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UnpublishWorldWithHttpInfoAsync(worldId, cancellationToken);

        }

        /// <summary>
        /// Unpublish World Unpublish a world.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnpublishWorldWithHttpInfoAsync (string worldId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling WorldsApi->UnpublishWorld");

            var localVarPath = "/worlds/{worldId}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnpublishWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update World Update information about a specific World.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="updateWorldRequest"> (optional)</param>
        /// <returns>World</returns>
        public World UpdateWorld (string worldId, UpdateWorldRequest updateWorldRequest = default(UpdateWorldRequest))
        {
             ApiResponse<World> localVarResponse = UpdateWorldWithHttpInfo(worldId, updateWorldRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update World Update information about a specific World.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="updateWorldRequest"> (optional)</param>
        /// <returns>ApiResponse of World</returns>
        public ApiResponse<World> UpdateWorldWithHttpInfo (string worldId, UpdateWorldRequest updateWorldRequest = default(UpdateWorldRequest))
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling WorldsApi->UpdateWorld");

            var localVarPath = "/worlds/{worldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter
            if (updateWorldRequest != null && updateWorldRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateWorldRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateWorldRequest; // byte array
            }

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<World>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (World) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(World)));
        }

        /// <summary>
        /// Update World Update information about a specific World.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="updateWorldRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of World</returns>
        public async System.Threading.Tasks.Task<World> UpdateWorldAsync (string worldId, UpdateWorldRequest updateWorldRequest = default(UpdateWorldRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<World> localVarResponse = await UpdateWorldWithHttpInfoAsync(worldId, updateWorldRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update World Update information about a specific World.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="updateWorldRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (World)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<World>> UpdateWorldWithHttpInfoAsync (string worldId, UpdateWorldRequest updateWorldRequest = default(UpdateWorldRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling WorldsApi->UpdateWorld");

            var localVarPath = "/worlds/{worldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter
            if (updateWorldRequest != null && updateWorldRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateWorldRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateWorldRequest; // byte array
            }

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<World>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (World) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(World)));
        }

    }
}
