/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: me@ruby.js.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using io.github.vrchatapi.Client;
using io.github.vrchatapi.Model;

namespace io.github.vrchatapi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstancesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Instance
        /// </summary>
        /// <remarks>
        /// Returns an instance.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <returns>Instance</returns>
        Instance GetInstance (string worldId, string instanceId);

        /// <summary>
        /// Get Instance
        /// </summary>
        /// <remarks>
        /// Returns an instance.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <returns>ApiResponse of Instance</returns>
        ApiResponse<Instance> GetInstanceWithHttpInfo (string worldId, string instanceId);
        /// <summary>
        /// Get Instance Short Name
        /// </summary>
        /// <remarks>
        /// Returns an instance short name.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <returns>string</returns>
        string GetShortName (string worldId, string instanceId);

        /// <summary>
        /// Get Instance Short Name
        /// </summary>
        /// <remarks>
        /// Returns an instance short name.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetShortNameWithHttpInfo (string worldId, string instanceId);
        /// <summary>
        /// Send Self Invite
        /// </summary>
        /// <remarks>
        /// Sends an invite to the instance to yourself.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <returns>Success</returns>
        Success SendSelfInvite (string worldId, string instanceId);

        /// <summary>
        /// Send Self Invite
        /// </summary>
        /// <remarks>
        /// Sends an invite to the instance to yourself.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> SendSelfInviteWithHttpInfo (string worldId, string instanceId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Instance
        /// </summary>
        /// <remarks>
        /// Returns an instance.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Instance</returns>
        System.Threading.Tasks.Task<Instance> GetInstanceAsync (string worldId, string instanceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Instance
        /// </summary>
        /// <remarks>
        /// Returns an instance.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Instance)</returns>
        System.Threading.Tasks.Task<ApiResponse<Instance>> GetInstanceWithHttpInfoAsync (string worldId, string instanceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Instance Short Name
        /// </summary>
        /// <remarks>
        /// Returns an instance short name.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetShortNameAsync (string worldId, string instanceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Instance Short Name
        /// </summary>
        /// <remarks>
        /// Returns an instance short name.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetShortNameWithHttpInfoAsync (string worldId, string instanceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send Self Invite
        /// </summary>
        /// <remarks>
        /// Sends an invite to the instance to yourself.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> SendSelfInviteAsync (string worldId, string instanceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send Self Invite
        /// </summary>
        /// <remarks>
        /// Sends an invite to the instance to yourself.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> SendSelfInviteWithHttpInfoAsync (string worldId, string instanceId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InstancesApi : IInstancesApi
    {
        private io.github.vrchatapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InstancesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstancesApi(String basePath)
        {
            this.Configuration = new io.github.vrchatapi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = io.github.vrchatapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstancesApi"/> class
        /// </summary>
        /// <returns></returns>
        public InstancesApi()
        {
            this.Configuration = io.github.vrchatapi.Client.Configuration.Default;

            ExceptionFactory = io.github.vrchatapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstancesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InstancesApi(io.github.vrchatapi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = io.github.vrchatapi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = io.github.vrchatapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public io.github.vrchatapi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public io.github.vrchatapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Instance Returns an instance.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <returns>Instance</returns>
        public Instance GetInstance (string worldId, string instanceId)
        {
             ApiResponse<Instance> localVarResponse = GetInstanceWithHttpInfo(worldId, instanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Instance Returns an instance.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <returns>ApiResponse of Instance</returns>
        public ApiResponse<Instance> GetInstanceWithHttpInfo (string worldId, string instanceId)
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling InstancesApi->GetInstance");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->GetInstance");

            var localVarPath = "/instances/{worldId}:{instanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Instance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Instance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Instance)));
        }

        /// <summary>
        /// Get Instance Returns an instance.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Instance</returns>
        public async System.Threading.Tasks.Task<Instance> GetInstanceAsync (string worldId, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Instance> localVarResponse = await GetInstanceWithHttpInfoAsync(worldId, instanceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Instance Returns an instance.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Instance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Instance>> GetInstanceWithHttpInfoAsync (string worldId, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling InstancesApi->GetInstance");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->GetInstance");

            var localVarPath = "/instances/{worldId}:{instanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Instance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Instance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Instance)));
        }

        /// <summary>
        /// Get Instance Short Name Returns an instance short name.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <returns>string</returns>
        public string GetShortName (string worldId, string instanceId)
        {
             ApiResponse<string> localVarResponse = GetShortNameWithHttpInfo(worldId, instanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Instance Short Name Returns an instance short name.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> GetShortNameWithHttpInfo (string worldId, string instanceId)
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling InstancesApi->GetShortName");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->GetShortName");

            var localVarPath = "/instances/{worldId}:{instanceId}/shortName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShortName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Instance Short Name Returns an instance short name.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetShortNameAsync (string worldId, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await GetShortNameWithHttpInfoAsync(worldId, instanceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Instance Short Name Returns an instance short name.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetShortNameWithHttpInfoAsync (string worldId, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling InstancesApi->GetShortName");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->GetShortName");

            var localVarPath = "/instances/{worldId}:{instanceId}/shortName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShortName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Send Self Invite Sends an invite to the instance to yourself.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <returns>Success</returns>
        public Success SendSelfInvite (string worldId, string instanceId)
        {
             ApiResponse<Success> localVarResponse = SendSelfInviteWithHttpInfo(worldId, instanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send Self Invite Sends an invite to the instance to yourself.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse<Success> SendSelfInviteWithHttpInfo (string worldId, string instanceId)
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling InstancesApi->SendSelfInvite");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->SendSelfInvite");

            var localVarPath = "/instances/{worldId}:{instanceId}/invite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSelfInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Send Self Invite Sends an invite to the instance to yourself.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> SendSelfInviteAsync (string worldId, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Success> localVarResponse = await SendSelfInviteWithHttpInfoAsync(worldId, instanceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send Self Invite Sends an invite to the instance to yourself.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="instanceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> SendSelfInviteWithHttpInfoAsync (string worldId, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
                throw new ApiException(400, "Missing required parameter 'worldId' when calling InstancesApi->SendSelfInvite");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->SendSelfInvite");

            var localVarPath = "/instances/{worldId}:{instanceId}/invite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldId != null) localVarPathParams.Add("worldId", this.Configuration.ApiClient.ParameterToString(worldId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (apiKeyCookie) required
            // authentication (authCookie) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSelfInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

    }
}
