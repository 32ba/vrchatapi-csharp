/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: me@ruby.js.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using io.github.vrchatapi.Client;
using io.github.vrchatapi.Model;

namespace io.github.vrchatapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Download CSS
        /// </summary>
        /// <remarks>
        /// Fetches the CSS code to the frontend React website.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
        /// <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
        /// <returns>string</returns>
        string GetCSS(string variant = default(string), string branch = default(string));

        /// <summary>
        /// Download CSS
        /// </summary>
        /// <remarks>
        /// Fetches the CSS code to the frontend React website.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
        /// <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetCSSWithHttpInfo(string variant = default(string), string branch = default(string));
        /// <summary>
        /// Fetch API Config
        /// </summary>
        /// <remarks>
        /// API config contains configuration that the clients needs to work properly.  Currently the most important value here is &#x60;clientApiKey&#x60; which is used for all other API endpoints.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>APIConfig</returns>
        APIConfig GetConfig();

        /// <summary>
        /// Fetch API Config
        /// </summary>
        /// <remarks>
        /// API config contains configuration that the clients needs to work properly.  Currently the most important value here is &#x60;clientApiKey&#x60; which is used for all other API endpoints.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of APIConfig</returns>
        ApiResponse<APIConfig> GetConfigWithHttpInfo();
        /// <summary>
        /// Current Online Users
        /// </summary>
        /// <remarks>
        /// Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>int</returns>
        int GetCurrentOnlineUsers();

        /// <summary>
        /// Current Online Users
        /// </summary>
        /// <remarks>
        /// Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> GetCurrentOnlineUsersWithHttpInfo();
        /// <summary>
        /// Check API Health
        /// </summary>
        /// <remarks>
        /// ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>APIHealth</returns>
        [Obsolete]
        APIHealth GetHealth();

        /// <summary>
        /// Check API Health
        /// </summary>
        /// <remarks>
        /// ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of APIHealth</returns>
        [Obsolete]
        ApiResponse<APIHealth> GetHealthWithHttpInfo();
        /// <summary>
        /// Show Information Notices
        /// </summary>
        /// <remarks>
        /// IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  &#x60;include&#x60; is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \&quot;any of\&quot; search.  &#x60;require&#x60; is used to limit what Information Pushes should be included in the response. This is usually used in combination with &#x60;include&#x60;, and is an \&quot;all of\&quot; search.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="require">Tags to include (comma-separated). All of the tags needs to be present. (optional)</param>
        /// <param name="include">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
        /// <returns>List&lt;InfoPush&gt;</returns>
        List<InfoPush> GetInfoPush(string require = default(string), string include = default(string));

        /// <summary>
        /// Show Information Notices
        /// </summary>
        /// <remarks>
        /// IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  &#x60;include&#x60; is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \&quot;any of\&quot; search.  &#x60;require&#x60; is used to limit what Information Pushes should be included in the response. This is usually used in combination with &#x60;include&#x60;, and is an \&quot;all of\&quot; search.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="require">Tags to include (comma-separated). All of the tags needs to be present. (optional)</param>
        /// <param name="include">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
        /// <returns>ApiResponse of List&lt;InfoPush&gt;</returns>
        ApiResponse<List<InfoPush>> GetInfoPushWithHttpInfo(string require = default(string), string include = default(string));
        /// <summary>
        /// Download JavaScript
        /// </summary>
        /// <remarks>
        /// Fetches the JavaScript code to the frontend React website.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
        /// <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
        /// <returns>string</returns>
        string GetJavaScript(string variant = default(string), string branch = default(string));

        /// <summary>
        /// Download JavaScript
        /// </summary>
        /// <remarks>
        /// Fetches the JavaScript code to the frontend React website.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
        /// <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetJavaScriptWithHttpInfo(string variant = default(string), string branch = default(string));
        /// <summary>
        /// Current System Time
        /// </summary>
        /// <remarks>
        /// Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DateTime</returns>
        DateTime GetSystemTime();

        /// <summary>
        /// Current System Time
        /// </summary>
        /// <remarks>
        /// Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DateTime</returns>
        ApiResponse<DateTime> GetSystemTimeWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Download CSS
        /// </summary>
        /// <remarks>
        /// Fetches the CSS code to the frontend React website.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
        /// <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetCSSAsync(string variant = default(string), string branch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download CSS
        /// </summary>
        /// <remarks>
        /// Fetches the CSS code to the frontend React website.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
        /// <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetCSSWithHttpInfoAsync(string variant = default(string), string branch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch API Config
        /// </summary>
        /// <remarks>
        /// API config contains configuration that the clients needs to work properly.  Currently the most important value here is &#x60;clientApiKey&#x60; which is used for all other API endpoints.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of APIConfig</returns>
        System.Threading.Tasks.Task<APIConfig> GetConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch API Config
        /// </summary>
        /// <remarks>
        /// API config contains configuration that the clients needs to work properly.  Currently the most important value here is &#x60;clientApiKey&#x60; which is used for all other API endpoints.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (APIConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIConfig>> GetConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Current Online Users
        /// </summary>
        /// <remarks>
        /// Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> GetCurrentOnlineUsersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Current Online Users
        /// </summary>
        /// <remarks>
        /// Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> GetCurrentOnlineUsersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check API Health
        /// </summary>
        /// <remarks>
        /// ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of APIHealth</returns>
        [Obsolete]
        System.Threading.Tasks.Task<APIHealth> GetHealthAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check API Health
        /// </summary>
        /// <remarks>
        /// ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (APIHealth)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<APIHealth>> GetHealthWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show Information Notices
        /// </summary>
        /// <remarks>
        /// IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  &#x60;include&#x60; is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \&quot;any of\&quot; search.  &#x60;require&#x60; is used to limit what Information Pushes should be included in the response. This is usually used in combination with &#x60;include&#x60;, and is an \&quot;all of\&quot; search.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="require">Tags to include (comma-separated). All of the tags needs to be present. (optional)</param>
        /// <param name="include">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InfoPush&gt;</returns>
        System.Threading.Tasks.Task<List<InfoPush>> GetInfoPushAsync(string require = default(string), string include = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show Information Notices
        /// </summary>
        /// <remarks>
        /// IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  &#x60;include&#x60; is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \&quot;any of\&quot; search.  &#x60;require&#x60; is used to limit what Information Pushes should be included in the response. This is usually used in combination with &#x60;include&#x60;, and is an \&quot;all of\&quot; search.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="require">Tags to include (comma-separated). All of the tags needs to be present. (optional)</param>
        /// <param name="include">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InfoPush&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InfoPush>>> GetInfoPushWithHttpInfoAsync(string require = default(string), string include = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download JavaScript
        /// </summary>
        /// <remarks>
        /// Fetches the JavaScript code to the frontend React website.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
        /// <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetJavaScriptAsync(string variant = default(string), string branch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download JavaScript
        /// </summary>
        /// <remarks>
        /// Fetches the JavaScript code to the frontend React website.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
        /// <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetJavaScriptWithHttpInfoAsync(string variant = default(string), string branch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Current System Time
        /// </summary>
        /// <remarks>
        /// Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DateTime</returns>
        System.Threading.Tasks.Task<DateTime> GetSystemTimeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Current System Time
        /// </summary>
        /// <remarks>
        /// Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DateTime)</returns>
        System.Threading.Tasks.Task<ApiResponse<DateTime>> GetSystemTimeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemApi : ISystemApiSync, ISystemApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SystemApi : ISystemApi
    {
        private io.github.vrchatapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SystemApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SystemApi(string basePath)
        {
            this.Configuration = io.github.vrchatapi.Client.Configuration.MergeConfigurations(
                io.github.vrchatapi.Client.GlobalConfiguration.Instance,
                new io.github.vrchatapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new io.github.vrchatapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new io.github.vrchatapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = io.github.vrchatapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SystemApi(io.github.vrchatapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = io.github.vrchatapi.Client.Configuration.MergeConfigurations(
                io.github.vrchatapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new io.github.vrchatapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new io.github.vrchatapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = io.github.vrchatapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SystemApi(io.github.vrchatapi.Client.ISynchronousClient client, io.github.vrchatapi.Client.IAsynchronousClient asyncClient, io.github.vrchatapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = io.github.vrchatapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public io.github.vrchatapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public io.github.vrchatapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public io.github.vrchatapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public io.github.vrchatapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Download CSS Fetches the CSS code to the frontend React website.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
        /// <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
        /// <returns>string</returns>
        public string GetCSS(string variant = default(string), string branch = default(string))
        {
            io.github.vrchatapi.Client.ApiResponse<string> localVarResponse = GetCSSWithHttpInfo(variant, branch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download CSS Fetches the CSS code to the frontend React website.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
        /// <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
        /// <returns>ApiResponse of string</returns>
        public io.github.vrchatapi.Client.ApiResponse<string> GetCSSWithHttpInfo(string variant = default(string), string branch = default(string))
        {
            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/css",
                "application/json"
            };

            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (variant != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.github.vrchatapi.Client.ClientUtils.ParameterToMultiMap("", "variant", variant));
            }
            if (branch != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.github.vrchatapi.Client.ClientUtils.ParameterToMultiMap("", "branch", branch));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/css/app.css", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCSS", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download CSS Fetches the CSS code to the frontend React website.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
        /// <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetCSSAsync(string variant = default(string), string branch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.github.vrchatapi.Client.ApiResponse<string> localVarResponse = await GetCSSWithHttpInfoAsync(variant, branch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download CSS Fetches the CSS code to the frontend React website.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
        /// <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<io.github.vrchatapi.Client.ApiResponse<string>> GetCSSWithHttpInfoAsync(string variant = default(string), string branch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/css",
                "application/json"
            };


            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (variant != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.github.vrchatapi.Client.ClientUtils.ParameterToMultiMap("", "variant", variant));
            }
            if (branch != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.github.vrchatapi.Client.ClientUtils.ParameterToMultiMap("", "branch", branch));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/css/app.css", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCSS", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch API Config API config contains configuration that the clients needs to work properly.  Currently the most important value here is &#x60;clientApiKey&#x60; which is used for all other API endpoints.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>APIConfig</returns>
        public APIConfig GetConfig()
        {
            io.github.vrchatapi.Client.ApiResponse<APIConfig> localVarResponse = GetConfigWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch API Config API config contains configuration that the clients needs to work properly.  Currently the most important value here is &#x60;clientApiKey&#x60; which is used for all other API endpoints.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of APIConfig</returns>
        public io.github.vrchatapi.Client.ApiResponse<APIConfig> GetConfigWithHttpInfo()
        {
            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<APIConfig>("/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch API Config API config contains configuration that the clients needs to work properly.  Currently the most important value here is &#x60;clientApiKey&#x60; which is used for all other API endpoints.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of APIConfig</returns>
        public async System.Threading.Tasks.Task<APIConfig> GetConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.github.vrchatapi.Client.ApiResponse<APIConfig> localVarResponse = await GetConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch API Config API config contains configuration that the clients needs to work properly.  Currently the most important value here is &#x60;clientApiKey&#x60; which is used for all other API endpoints.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (APIConfig)</returns>
        public async System.Threading.Tasks.Task<io.github.vrchatapi.Client.ApiResponse<APIConfig>> GetConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<APIConfig>("/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Current Online Users Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>int</returns>
        public int GetCurrentOnlineUsers()
        {
            io.github.vrchatapi.Client.ApiResponse<int> localVarResponse = GetCurrentOnlineUsersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Current Online Users Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of int</returns>
        public io.github.vrchatapi.Client.ApiResponse<int> GetCurrentOnlineUsersWithHttpInfo()
        {
            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<int>("/visits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentOnlineUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Current Online Users Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> GetCurrentOnlineUsersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.github.vrchatapi.Client.ApiResponse<int> localVarResponse = await GetCurrentOnlineUsersWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Current Online Users Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<io.github.vrchatapi.Client.ApiResponse<int>> GetCurrentOnlineUsersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<int>("/visits", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentOnlineUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check API Health ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>APIHealth</returns>
        [Obsolete]
        public APIHealth GetHealth()
        {
            io.github.vrchatapi.Client.ApiResponse<APIHealth> localVarResponse = GetHealthWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check API Health ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of APIHealth</returns>
        [Obsolete]
        public io.github.vrchatapi.Client.ApiResponse<APIHealth> GetHealthWithHttpInfo()
        {
            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<APIHealth>("/health", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHealth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check API Health ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of APIHealth</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<APIHealth> GetHealthAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.github.vrchatapi.Client.ApiResponse<APIHealth> localVarResponse = await GetHealthWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check API Health ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (APIHealth)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<io.github.vrchatapi.Client.ApiResponse<APIHealth>> GetHealthWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<APIHealth>("/health", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHealth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Information Notices IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  &#x60;include&#x60; is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \&quot;any of\&quot; search.  &#x60;require&#x60; is used to limit what Information Pushes should be included in the response. This is usually used in combination with &#x60;include&#x60;, and is an \&quot;all of\&quot; search.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="require">Tags to include (comma-separated). All of the tags needs to be present. (optional)</param>
        /// <param name="include">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
        /// <returns>List&lt;InfoPush&gt;</returns>
        public List<InfoPush> GetInfoPush(string require = default(string), string include = default(string))
        {
            io.github.vrchatapi.Client.ApiResponse<List<InfoPush>> localVarResponse = GetInfoPushWithHttpInfo(require, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Information Notices IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  &#x60;include&#x60; is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \&quot;any of\&quot; search.  &#x60;require&#x60; is used to limit what Information Pushes should be included in the response. This is usually used in combination with &#x60;include&#x60;, and is an \&quot;all of\&quot; search.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="require">Tags to include (comma-separated). All of the tags needs to be present. (optional)</param>
        /// <param name="include">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
        /// <returns>ApiResponse of List&lt;InfoPush&gt;</returns>
        public io.github.vrchatapi.Client.ApiResponse<List<InfoPush>> GetInfoPushWithHttpInfo(string require = default(string), string include = default(string))
        {
            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (require != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.github.vrchatapi.Client.ClientUtils.ParameterToMultiMap("", "require", require));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.github.vrchatapi.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InfoPush>>("/infoPush", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInfoPush", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Information Notices IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  &#x60;include&#x60; is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \&quot;any of\&quot; search.  &#x60;require&#x60; is used to limit what Information Pushes should be included in the response. This is usually used in combination with &#x60;include&#x60;, and is an \&quot;all of\&quot; search.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="require">Tags to include (comma-separated). All of the tags needs to be present. (optional)</param>
        /// <param name="include">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InfoPush&gt;</returns>
        public async System.Threading.Tasks.Task<List<InfoPush>> GetInfoPushAsync(string require = default(string), string include = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.github.vrchatapi.Client.ApiResponse<List<InfoPush>> localVarResponse = await GetInfoPushWithHttpInfoAsync(require, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Information Notices IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  &#x60;include&#x60; is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \&quot;any of\&quot; search.  &#x60;require&#x60; is used to limit what Information Pushes should be included in the response. This is usually used in combination with &#x60;include&#x60;, and is an \&quot;all of\&quot; search.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="require">Tags to include (comma-separated). All of the tags needs to be present. (optional)</param>
        /// <param name="include">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InfoPush&gt;)</returns>
        public async System.Threading.Tasks.Task<io.github.vrchatapi.Client.ApiResponse<List<InfoPush>>> GetInfoPushWithHttpInfoAsync(string require = default(string), string include = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (require != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.github.vrchatapi.Client.ClientUtils.ParameterToMultiMap("", "require", require));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.github.vrchatapi.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InfoPush>>("/infoPush", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInfoPush", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download JavaScript Fetches the JavaScript code to the frontend React website.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
        /// <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
        /// <returns>string</returns>
        public string GetJavaScript(string variant = default(string), string branch = default(string))
        {
            io.github.vrchatapi.Client.ApiResponse<string> localVarResponse = GetJavaScriptWithHttpInfo(variant, branch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download JavaScript Fetches the JavaScript code to the frontend React website.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
        /// <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
        /// <returns>ApiResponse of string</returns>
        public io.github.vrchatapi.Client.ApiResponse<string> GetJavaScriptWithHttpInfo(string variant = default(string), string branch = default(string))
        {
            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/javascript",
                "application/json"
            };

            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (variant != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.github.vrchatapi.Client.ClientUtils.ParameterToMultiMap("", "variant", variant));
            }
            if (branch != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.github.vrchatapi.Client.ClientUtils.ParameterToMultiMap("", "branch", branch));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/js/app.js", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJavaScript", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download JavaScript Fetches the JavaScript code to the frontend React website.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
        /// <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetJavaScriptAsync(string variant = default(string), string branch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.github.vrchatapi.Client.ApiResponse<string> localVarResponse = await GetJavaScriptWithHttpInfoAsync(variant, branch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download JavaScript Fetches the JavaScript code to the frontend React website.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
        /// <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<io.github.vrchatapi.Client.ApiResponse<string>> GetJavaScriptWithHttpInfoAsync(string variant = default(string), string branch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/javascript",
                "application/json"
            };


            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (variant != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.github.vrchatapi.Client.ClientUtils.ParameterToMultiMap("", "variant", variant));
            }
            if (branch != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.github.vrchatapi.Client.ClientUtils.ParameterToMultiMap("", "branch", branch));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/js/app.js", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJavaScript", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Current System Time Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DateTime</returns>
        public DateTime GetSystemTime()
        {
            io.github.vrchatapi.Client.ApiResponse<DateTime> localVarResponse = GetSystemTimeWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Current System Time Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DateTime</returns>
        public io.github.vrchatapi.Client.ApiResponse<DateTime> GetSystemTimeWithHttpInfo()
        {
            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<DateTime>("/time", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Current System Time Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DateTime</returns>
        public async System.Threading.Tasks.Task<DateTime> GetSystemTimeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.github.vrchatapi.Client.ApiResponse<DateTime> localVarResponse = await GetSystemTimeWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Current System Time Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DateTime)</returns>
        public async System.Threading.Tasks.Task<io.github.vrchatapi.Client.ApiResponse<DateTime>> GetSystemTimeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DateTime>("/time", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
