/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: me@ruby.js.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using io.github.vrchatapi.Client;
using io.github.vrchatapi.Model;

namespace io.github.vrchatapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFriendsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Friend Request
        /// </summary>
        /// <remarks>
        /// Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the &#x60;deleteNotification&#x60; endpoint instead.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Success</returns>
        Success DeleteFriendRequest(string userId);

        /// <summary>
        /// Delete Friend Request
        /// </summary>
        /// <remarks>
        /// Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the &#x60;deleteNotification&#x60; endpoint instead.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> DeleteFriendRequestWithHttpInfo(string userId);
        /// <summary>
        /// Send Friend Request
        /// </summary>
        /// <remarks>
        /// Send a friend request to another user.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Notification</returns>
        Notification Friend(string userId);

        /// <summary>
        /// Send Friend Request
        /// </summary>
        /// <remarks>
        /// Send a friend request to another user.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> FriendWithHttpInfo(string userId);
        /// <summary>
        /// Check Friend Status
        /// </summary>
        /// <remarks>
        /// Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming &#x60;Notification&#x60; of type &#x60;friendRequest&#x60;, and then accepting that notification.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>FriendStatus</returns>
        FriendStatus GetFriendStatus(string userId);

        /// <summary>
        /// Check Friend Status
        /// </summary>
        /// <remarks>
        /// Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming &#x60;Notification&#x60; of type &#x60;friendRequest&#x60;, and then accepting that notification.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of FriendStatus</returns>
        ApiResponse<FriendStatus> GetFriendStatusWithHttpInfo(string userId);
        /// <summary>
        /// List Friends
        /// </summary>
        /// <remarks>
        /// List information about friends.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offline">Returns *only* offline users if true, returns only online and active users if false (optional)</param>
        /// <returns>List&lt;LimitedUser&gt;</returns>
        List<LimitedUser> GetFriends(int? offset = default(int?), int? n = default(int?), bool? offline = default(bool?));

        /// <summary>
        /// List Friends
        /// </summary>
        /// <remarks>
        /// List information about friends.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offline">Returns *only* offline users if true, returns only online and active users if false (optional)</param>
        /// <returns>ApiResponse of List&lt;LimitedUser&gt;</returns>
        ApiResponse<List<LimitedUser>> GetFriendsWithHttpInfo(int? offset = default(int?), int? n = default(int?), bool? offline = default(bool?));
        /// <summary>
        /// Unfriend
        /// </summary>
        /// <remarks>
        /// Unfriend a user by ID.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Success</returns>
        Success Unfriend(string userId);

        /// <summary>
        /// Unfriend
        /// </summary>
        /// <remarks>
        /// Unfriend a user by ID.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> UnfriendWithHttpInfo(string userId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFriendsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Friend Request
        /// </summary>
        /// <remarks>
        /// Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the &#x60;deleteNotification&#x60; endpoint instead.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> DeleteFriendRequestAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Friend Request
        /// </summary>
        /// <remarks>
        /// Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the &#x60;deleteNotification&#x60; endpoint instead.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> DeleteFriendRequestWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send Friend Request
        /// </summary>
        /// <remarks>
        /// Send a friend request to another user.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> FriendAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Friend Request
        /// </summary>
        /// <remarks>
        /// Send a friend request to another user.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> FriendWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check Friend Status
        /// </summary>
        /// <remarks>
        /// Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming &#x60;Notification&#x60; of type &#x60;friendRequest&#x60;, and then accepting that notification.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FriendStatus</returns>
        System.Threading.Tasks.Task<FriendStatus> GetFriendStatusAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check Friend Status
        /// </summary>
        /// <remarks>
        /// Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming &#x60;Notification&#x60; of type &#x60;friendRequest&#x60;, and then accepting that notification.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FriendStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<FriendStatus>> GetFriendStatusWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Friends
        /// </summary>
        /// <remarks>
        /// List information about friends.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offline">Returns *only* offline users if true, returns only online and active users if false (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LimitedUser&gt;</returns>
        System.Threading.Tasks.Task<List<LimitedUser>> GetFriendsAsync(int? offset = default(int?), int? n = default(int?), bool? offline = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Friends
        /// </summary>
        /// <remarks>
        /// List information about friends.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offline">Returns *only* offline users if true, returns only online and active users if false (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LimitedUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LimitedUser>>> GetFriendsWithHttpInfoAsync(int? offset = default(int?), int? n = default(int?), bool? offline = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unfriend
        /// </summary>
        /// <remarks>
        /// Unfriend a user by ID.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> UnfriendAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unfriend
        /// </summary>
        /// <remarks>
        /// Unfriend a user by ID.
        /// </remarks>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> UnfriendWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFriendsApi : IFriendsApiSync, IFriendsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FriendsApi : IFriendsApi
    {
        private io.github.vrchatapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FriendsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FriendsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FriendsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FriendsApi(string basePath)
        {
            this.Configuration = io.github.vrchatapi.Client.Configuration.MergeConfigurations(
                io.github.vrchatapi.Client.GlobalConfiguration.Instance,
                new io.github.vrchatapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new io.github.vrchatapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new io.github.vrchatapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = io.github.vrchatapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FriendsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FriendsApi(io.github.vrchatapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = io.github.vrchatapi.Client.Configuration.MergeConfigurations(
                io.github.vrchatapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new io.github.vrchatapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new io.github.vrchatapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = io.github.vrchatapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FriendsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FriendsApi(io.github.vrchatapi.Client.ISynchronousClient client, io.github.vrchatapi.Client.IAsynchronousClient asyncClient, io.github.vrchatapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = io.github.vrchatapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public io.github.vrchatapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public io.github.vrchatapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public io.github.vrchatapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public io.github.vrchatapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Friend Request Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the &#x60;deleteNotification&#x60; endpoint instead.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Success</returns>
        public Success DeleteFriendRequest(string userId)
        {
            io.github.vrchatapi.Client.ApiResponse<Success> localVarResponse = DeleteFriendRequestWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Friend Request Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the &#x60;deleteNotification&#x60; endpoint instead.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Success</returns>
        public io.github.vrchatapi.Client.ApiResponse<Success> DeleteFriendRequestWithHttpInfo(string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new io.github.vrchatapi.Client.ApiException(400, "Missing required parameter 'userId' when calling FriendsApi->DeleteFriendRequest");

            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", io.github.vrchatapi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiKeyCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }
            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Success>("/user/{userId}/friendRequest", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFriendRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Friend Request Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the &#x60;deleteNotification&#x60; endpoint instead.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> DeleteFriendRequestAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.github.vrchatapi.Client.ApiResponse<Success> localVarResponse = await DeleteFriendRequestWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Friend Request Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the &#x60;deleteNotification&#x60; endpoint instead.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<io.github.vrchatapi.Client.ApiResponse<Success>> DeleteFriendRequestWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new io.github.vrchatapi.Client.ApiException(400, "Missing required parameter 'userId' when calling FriendsApi->DeleteFriendRequest");


            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", io.github.vrchatapi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiKeyCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }
            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Success>("/user/{userId}/friendRequest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFriendRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Friend Request Send a friend request to another user.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Notification</returns>
        public Notification Friend(string userId)
        {
            io.github.vrchatapi.Client.ApiResponse<Notification> localVarResponse = FriendWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Friend Request Send a friend request to another user.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Notification</returns>
        public io.github.vrchatapi.Client.ApiResponse<Notification> FriendWithHttpInfo(string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new io.github.vrchatapi.Client.ApiException(400, "Missing required parameter 'userId' when calling FriendsApi->Friend");

            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", io.github.vrchatapi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiKeyCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }
            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Notification>("/user/{userId}/friendRequest", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Friend", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Friend Request Send a friend request to another user.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> FriendAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.github.vrchatapi.Client.ApiResponse<Notification> localVarResponse = await FriendWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Friend Request Send a friend request to another user.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<io.github.vrchatapi.Client.ApiResponse<Notification>> FriendWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new io.github.vrchatapi.Client.ApiException(400, "Missing required parameter 'userId' when calling FriendsApi->Friend");


            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", io.github.vrchatapi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiKeyCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }
            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Notification>("/user/{userId}/friendRequest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Friend", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check Friend Status Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming &#x60;Notification&#x60; of type &#x60;friendRequest&#x60;, and then accepting that notification.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>FriendStatus</returns>
        public FriendStatus GetFriendStatus(string userId)
        {
            io.github.vrchatapi.Client.ApiResponse<FriendStatus> localVarResponse = GetFriendStatusWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Friend Status Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming &#x60;Notification&#x60; of type &#x60;friendRequest&#x60;, and then accepting that notification.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of FriendStatus</returns>
        public io.github.vrchatapi.Client.ApiResponse<FriendStatus> GetFriendStatusWithHttpInfo(string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new io.github.vrchatapi.Client.ApiException(400, "Missing required parameter 'userId' when calling FriendsApi->GetFriendStatus");

            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", io.github.vrchatapi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiKeyCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }
            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FriendStatus>("/user/{userId}/friendStatus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFriendStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check Friend Status Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming &#x60;Notification&#x60; of type &#x60;friendRequest&#x60;, and then accepting that notification.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FriendStatus</returns>
        public async System.Threading.Tasks.Task<FriendStatus> GetFriendStatusAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.github.vrchatapi.Client.ApiResponse<FriendStatus> localVarResponse = await GetFriendStatusWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Friend Status Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming &#x60;Notification&#x60; of type &#x60;friendRequest&#x60;, and then accepting that notification.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FriendStatus)</returns>
        public async System.Threading.Tasks.Task<io.github.vrchatapi.Client.ApiResponse<FriendStatus>> GetFriendStatusWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new io.github.vrchatapi.Client.ApiException(400, "Missing required parameter 'userId' when calling FriendsApi->GetFriendStatus");


            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", io.github.vrchatapi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiKeyCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }
            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FriendStatus>("/user/{userId}/friendStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFriendStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Friends List information about friends.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offline">Returns *only* offline users if true, returns only online and active users if false (optional)</param>
        /// <returns>List&lt;LimitedUser&gt;</returns>
        public List<LimitedUser> GetFriends(int? offset = default(int?), int? n = default(int?), bool? offline = default(bool?))
        {
            io.github.vrchatapi.Client.ApiResponse<List<LimitedUser>> localVarResponse = GetFriendsWithHttpInfo(offset, n, offline);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Friends List information about friends.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offline">Returns *only* offline users if true, returns only online and active users if false (optional)</param>
        /// <returns>ApiResponse of List&lt;LimitedUser&gt;</returns>
        public io.github.vrchatapi.Client.ApiResponse<List<LimitedUser>> GetFriendsWithHttpInfo(int? offset = default(int?), int? n = default(int?), bool? offline = default(bool?))
        {
            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.github.vrchatapi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.github.vrchatapi.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offline != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.github.vrchatapi.Client.ClientUtils.ParameterToMultiMap("", "offline", offline));
            }

            // authentication (apiKeyCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }
            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<LimitedUser>>("/auth/user/friends", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFriends", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Friends List information about friends.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offline">Returns *only* offline users if true, returns only online and active users if false (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LimitedUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<LimitedUser>> GetFriendsAsync(int? offset = default(int?), int? n = default(int?), bool? offline = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.github.vrchatapi.Client.ApiResponse<List<LimitedUser>> localVarResponse = await GetFriendsWithHttpInfoAsync(offset, n, offline, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Friends List information about friends.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offline">Returns *only* offline users if true, returns only online and active users if false (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LimitedUser&gt;)</returns>
        public async System.Threading.Tasks.Task<io.github.vrchatapi.Client.ApiResponse<List<LimitedUser>>> GetFriendsWithHttpInfoAsync(int? offset = default(int?), int? n = default(int?), bool? offline = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.github.vrchatapi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.github.vrchatapi.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offline != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.github.vrchatapi.Client.ClientUtils.ParameterToMultiMap("", "offline", offline));
            }

            // authentication (apiKeyCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }
            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<LimitedUser>>("/auth/user/friends", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFriends", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unfriend Unfriend a user by ID.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Success</returns>
        public Success Unfriend(string userId)
        {
            io.github.vrchatapi.Client.ApiResponse<Success> localVarResponse = UnfriendWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unfriend Unfriend a user by ID.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Success</returns>
        public io.github.vrchatapi.Client.ApiResponse<Success> UnfriendWithHttpInfo(string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new io.github.vrchatapi.Client.ApiException(400, "Missing required parameter 'userId' when calling FriendsApi->Unfriend");

            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", io.github.vrchatapi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiKeyCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }
            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Success>("/auth/user/friends/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Unfriend", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unfriend Unfriend a user by ID.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> UnfriendAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.github.vrchatapi.Client.ApiResponse<Success> localVarResponse = await UnfriendWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unfriend Unfriend a user by ID.
        /// </summary>
        /// <exception cref="io.github.vrchatapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<io.github.vrchatapi.Client.ApiResponse<Success>> UnfriendWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new io.github.vrchatapi.Client.ApiException(400, "Missing required parameter 'userId' when calling FriendsApi->Unfriend");


            io.github.vrchatapi.Client.RequestOptions localVarRequestOptions = new io.github.vrchatapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.github.vrchatapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.github.vrchatapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", io.github.vrchatapi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiKeyCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }
            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Success>("/auth/user/friends/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Unfriend", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
