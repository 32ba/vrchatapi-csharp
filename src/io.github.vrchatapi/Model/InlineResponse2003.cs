/*
 * VRChat API Documentation
 *
 * ![VRChat API Banner](https://raw.githubusercontent.com/vrchatapi/vrchatapi.github.io/master/assets/apibanner.png)  # VRChat API Documentation This project is an [OPEN Open Source Project](https://openopensource.org)  Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.  ## Disclaimer  This is the official response of the VRChat Team (from Tupper more specifically) on the usage of the VRChat API.  > **Use of the API using applications other than the approved methods (website, VRChat application) are not officially supported. You may use the API for your own application, but keep these guidelines in mind:** > * We do not provide documentation or support for the API. > * Do not make queries to the API more than once per 60 seconds. > * Abuse of the API may result in account termination. > * Access to API endpoints may break at any given time, with no warning.  As stated, this documentation was not created with the help of the official VRChat team. Therefore this documentation is not an official documentation of the VRChat API and may not be always up to date with the latest versions. If you find that a page or endpoint is not longer valid please create an issue and tell us so we can fix it.  ## Get in touch with us!  [https://discord.gg/qjZE9C9fkB#vrchat-api](https://discord.gg/qjZE9C9fkB)
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: me@ruby.js.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = io.github.vrchatapi.Client.OpenAPIDateConverter;

namespace io.github.vrchatapi.Model
{
    /// <summary>
    /// InlineResponse2003
    /// </summary>
    [DataContract]
    public partial class InlineResponse2003 :  IEquatable<InlineResponse2003>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2003" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse2003() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2003" /> class.
        /// </summary>
        /// <param name="isFriend">isFriend (required) (default to false).</param>
        /// <param name="outgoingRequest">outgoingRequest (required) (default to false).</param>
        /// <param name="incomingRequest">incomingRequest (required) (default to false).</param>
        public InlineResponse2003(bool isFriend = false, bool outgoingRequest = false, bool incomingRequest = false)
        {
            // to ensure "isFriend" is required (not null)
            if (isFriend == null)
            {
                throw new InvalidDataException("isFriend is a required property for InlineResponse2003 and cannot be null");
            }
            else
            {
                this.IsFriend = isFriend;
            }

            // to ensure "outgoingRequest" is required (not null)
            if (outgoingRequest == null)
            {
                throw new InvalidDataException("outgoingRequest is a required property for InlineResponse2003 and cannot be null");
            }
            else
            {
                this.OutgoingRequest = outgoingRequest;
            }

            // to ensure "incomingRequest" is required (not null)
            if (incomingRequest == null)
            {
                throw new InvalidDataException("incomingRequest is a required property for InlineResponse2003 and cannot be null");
            }
            else
            {
                this.IncomingRequest = incomingRequest;
            }

        }

        /// <summary>
        /// Gets or Sets IsFriend
        /// </summary>
        [DataMember(Name="isFriend", EmitDefaultValue=true)]
        public bool IsFriend { get; set; }

        /// <summary>
        /// Gets or Sets OutgoingRequest
        /// </summary>
        [DataMember(Name="outgoingRequest", EmitDefaultValue=true)]
        public bool OutgoingRequest { get; set; }

        /// <summary>
        /// Gets or Sets IncomingRequest
        /// </summary>
        [DataMember(Name="incomingRequest", EmitDefaultValue=true)]
        public bool IncomingRequest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2003 {\n");
            sb.Append("  IsFriend: ").Append(IsFriend).Append("\n");
            sb.Append("  OutgoingRequest: ").Append(OutgoingRequest).Append("\n");
            sb.Append("  IncomingRequest: ").Append(IncomingRequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2003);
        }

        /// <summary>
        /// Returns true if InlineResponse2003 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2003 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2003 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsFriend == input.IsFriend ||
                    (this.IsFriend != null &&
                    this.IsFriend.Equals(input.IsFriend))
                ) && 
                (
                    this.OutgoingRequest == input.OutgoingRequest ||
                    (this.OutgoingRequest != null &&
                    this.OutgoingRequest.Equals(input.OutgoingRequest))
                ) && 
                (
                    this.IncomingRequest == input.IncomingRequest ||
                    (this.IncomingRequest != null &&
                    this.IncomingRequest.Equals(input.IncomingRequest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsFriend != null)
                    hashCode = hashCode * 59 + this.IsFriend.GetHashCode();
                if (this.OutgoingRequest != null)
                    hashCode = hashCode * 59 + this.OutgoingRequest.GetHashCode();
                if (this.IncomingRequest != null)
                    hashCode = hashCode * 59 + this.IncomingRequest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
