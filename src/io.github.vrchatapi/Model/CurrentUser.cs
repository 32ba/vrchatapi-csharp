/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: me@ruby.js.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = io.github.vrchatapi.Client.OpenAPIDateConverter;

namespace io.github.vrchatapi.Model
{
    /// <summary>
    /// CurrentUser
    /// </summary>
    [DataContract]
    public partial class CurrentUser :  IEquatable<CurrentUser>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DeveloperType
        /// </summary>
        [DataMember(Name="developerType", EmitDefaultValue=true)]
        public DeveloperType DeveloperType { get; set; }
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=true)]
        public UserState State { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public UserStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentUser" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CurrentUser() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentUser" /> class.
        /// </summary>
        /// <param name="acceptedTOSVersion">acceptedTOSVersion (required).</param>
        /// <param name="accountDeletionDate">accountDeletionDate.</param>
        /// <param name="activeFriends">activeFriends.</param>
        /// <param name="allowAvatarCopying">allowAvatarCopying (required).</param>
        /// <param name="bio">bio (required).</param>
        /// <param name="bioLinks">bioLinks (required).</param>
        /// <param name="currentAvatar">currentAvatar (required).</param>
        /// <param name="currentAvatarAssetUrl">currentAvatarAssetUrl (required).</param>
        /// <param name="currentAvatarImageUrl">currentAvatarImageUrl (required).</param>
        /// <param name="currentAvatarThumbnailImageUrl">currentAvatarThumbnailImageUrl (required).</param>
        /// <param name="dateJoined">dateJoined (required).</param>
        /// <param name="developerType">developerType (required).</param>
        /// <param name="displayName">displayName (required).</param>
        /// <param name="emailVerified">emailVerified (required).</param>
        /// <param name="fallbackAvatar">fallbackAvatar.</param>
        /// <param name="friendGroupNames">Always empty array. (required).</param>
        /// <param name="friendKey">friendKey (required).</param>
        /// <param name="friends">friends (required).</param>
        /// <param name="hasBirthday">hasBirthday (required).</param>
        /// <param name="hasEmail">hasEmail (required).</param>
        /// <param name="hasLoggedInFromClient">hasLoggedInFromClient (required).</param>
        /// <param name="hasPendingEmail">hasPendingEmail (required).</param>
        /// <param name="homeLocation">homeLocation (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="isFriend">isFriend (required) (default to false).</param>
        /// <param name="lastLogin">lastLogin (required).</param>
        /// <param name="lastPlatform">This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;. (required).</param>
        /// <param name="obfuscatedEmail">obfuscatedEmail (required).</param>
        /// <param name="obfuscatedPendingEmail">obfuscatedPendingEmail (required).</param>
        /// <param name="oculusId">oculusId (required).</param>
        /// <param name="offlineFriends">offlineFriends.</param>
        /// <param name="onlineFriends">onlineFriends.</param>
        /// <param name="pastDisplayNames">pastDisplayNames (required).</param>
        /// <param name="profilePicOverride">profilePicOverride (required).</param>
        /// <param name="state">state (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="statusDescription">statusDescription (required).</param>
        /// <param name="statusFirstTime">statusFirstTime (required).</param>
        /// <param name="statusHistory">statusHistory (required).</param>
        /// <param name="steamDetails">steamDetails (required).</param>
        /// <param name="steamId">steamId (required).</param>
        /// <param name="tags">tags (required).</param>
        /// <param name="twoFactorAuthEnabled">twoFactorAuthEnabled (required).</param>
        /// <param name="unsubscribe">unsubscribe (required).</param>
        /// <param name="userIcon">userIcon (required).</param>
        /// <param name="username">username (required).</param>
        public CurrentUser(int acceptedTOSVersion = default(int), DateTime? accountDeletionDate = default(DateTime?), List<string> activeFriends = default(List<string>), bool allowAvatarCopying = default(bool), string bio = default(string), List<string> bioLinks = default(List<string>), string currentAvatar = default(string), string currentAvatarAssetUrl = default(string), string currentAvatarImageUrl = default(string), string currentAvatarThumbnailImageUrl = default(string), DateTime dateJoined = default(DateTime), DeveloperType developerType = default(DeveloperType), string displayName = default(string), bool emailVerified = default(bool), string fallbackAvatar = default(string), List<string> friendGroupNames = default(List<string>), string friendKey = default(string), List<string> friends = default(List<string>), bool hasBirthday = default(bool), bool hasEmail = default(bool), bool hasLoggedInFromClient = default(bool), bool hasPendingEmail = default(bool), string homeLocation = default(string), string id = default(string), bool isFriend = false, DateTime lastLogin = default(DateTime), string lastPlatform = default(string), string obfuscatedEmail = default(string), string obfuscatedPendingEmail = default(string), string oculusId = default(string), List<string> offlineFriends = default(List<string>), List<string> onlineFriends = default(List<string>), List<PastDisplayName> pastDisplayNames = default(List<PastDisplayName>), string profilePicOverride = default(string), UserState state = default(UserState), UserStatus status = default(UserStatus), string statusDescription = default(string), bool statusFirstTime = default(bool), List<string> statusHistory = default(List<string>), Object steamDetails = default(Object), string steamId = default(string), List<string> tags = default(List<string>), bool twoFactorAuthEnabled = default(bool), bool unsubscribe = default(bool), string userIcon = default(string), string username = default(string))
        {
            // to ensure "acceptedTOSVersion" is required (not null)
            if (acceptedTOSVersion == null)
            {
                throw new InvalidDataException("acceptedTOSVersion is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.AcceptedTOSVersion = acceptedTOSVersion;
            }

            this.AccountDeletionDate = accountDeletionDate;
            // to ensure "allowAvatarCopying" is required (not null)
            if (allowAvatarCopying == null)
            {
                throw new InvalidDataException("allowAvatarCopying is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.AllowAvatarCopying = allowAvatarCopying;
            }

            // to ensure "bio" is required (not null)
            if (bio == null)
            {
                throw new InvalidDataException("bio is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.Bio = bio;
            }

            // to ensure "bioLinks" is required (not null)
            if (bioLinks == null)
            {
                throw new InvalidDataException("bioLinks is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.BioLinks = bioLinks;
            }

            // to ensure "currentAvatar" is required (not null)
            if (currentAvatar == null)
            {
                throw new InvalidDataException("currentAvatar is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.CurrentAvatar = currentAvatar;
            }

            // to ensure "currentAvatarAssetUrl" is required (not null)
            if (currentAvatarAssetUrl == null)
            {
                throw new InvalidDataException("currentAvatarAssetUrl is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.CurrentAvatarAssetUrl = currentAvatarAssetUrl;
            }

            // to ensure "currentAvatarImageUrl" is required (not null)
            if (currentAvatarImageUrl == null)
            {
                throw new InvalidDataException("currentAvatarImageUrl is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.CurrentAvatarImageUrl = currentAvatarImageUrl;
            }

            // to ensure "currentAvatarThumbnailImageUrl" is required (not null)
            if (currentAvatarThumbnailImageUrl == null)
            {
                throw new InvalidDataException("currentAvatarThumbnailImageUrl is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.CurrentAvatarThumbnailImageUrl = currentAvatarThumbnailImageUrl;
            }

            // to ensure "dateJoined" is required (not null)
            if (dateJoined == null)
            {
                throw new InvalidDataException("dateJoined is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.DateJoined = dateJoined;
            }

            // to ensure "developerType" is required (not null)
            if (developerType == null)
            {
                throw new InvalidDataException("developerType is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.DeveloperType = developerType;
            }

            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new InvalidDataException("displayName is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.DisplayName = displayName;
            }

            // to ensure "emailVerified" is required (not null)
            if (emailVerified == null)
            {
                throw new InvalidDataException("emailVerified is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.EmailVerified = emailVerified;
            }

            // to ensure "friendGroupNames" is required (not null)
            if (friendGroupNames == null)
            {
                throw new InvalidDataException("friendGroupNames is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.FriendGroupNames = friendGroupNames;
            }

            // to ensure "friendKey" is required (not null)
            if (friendKey == null)
            {
                throw new InvalidDataException("friendKey is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.FriendKey = friendKey;
            }

            // to ensure "friends" is required (not null)
            if (friends == null)
            {
                throw new InvalidDataException("friends is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.Friends = friends;
            }

            // to ensure "hasBirthday" is required (not null)
            if (hasBirthday == null)
            {
                throw new InvalidDataException("hasBirthday is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.HasBirthday = hasBirthday;
            }

            // to ensure "hasEmail" is required (not null)
            if (hasEmail == null)
            {
                throw new InvalidDataException("hasEmail is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.HasEmail = hasEmail;
            }

            // to ensure "hasLoggedInFromClient" is required (not null)
            if (hasLoggedInFromClient == null)
            {
                throw new InvalidDataException("hasLoggedInFromClient is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.HasLoggedInFromClient = hasLoggedInFromClient;
            }

            // to ensure "hasPendingEmail" is required (not null)
            if (hasPendingEmail == null)
            {
                throw new InvalidDataException("hasPendingEmail is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.HasPendingEmail = hasPendingEmail;
            }

            // to ensure "homeLocation" is required (not null)
            if (homeLocation == null)
            {
                throw new InvalidDataException("homeLocation is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.HomeLocation = homeLocation;
            }

            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.Id = id;
            }

            // to ensure "isFriend" is required (not null)
            if (isFriend == null)
            {
                throw new InvalidDataException("isFriend is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.IsFriend = isFriend;
            }

            // to ensure "lastLogin" is required (not null)
            if (lastLogin == null)
            {
                throw new InvalidDataException("lastLogin is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.LastLogin = lastLogin;
            }

            // to ensure "lastPlatform" is required (not null)
            if (lastPlatform == null)
            {
                throw new InvalidDataException("lastPlatform is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.LastPlatform = lastPlatform;
            }

            // to ensure "obfuscatedEmail" is required (not null)
            if (obfuscatedEmail == null)
            {
                throw new InvalidDataException("obfuscatedEmail is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.ObfuscatedEmail = obfuscatedEmail;
            }

            // to ensure "obfuscatedPendingEmail" is required (not null)
            if (obfuscatedPendingEmail == null)
            {
                throw new InvalidDataException("obfuscatedPendingEmail is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.ObfuscatedPendingEmail = obfuscatedPendingEmail;
            }

            // to ensure "oculusId" is required (not null)
            if (oculusId == null)
            {
                throw new InvalidDataException("oculusId is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.OculusId = oculusId;
            }

            // to ensure "pastDisplayNames" is required (not null)
            if (pastDisplayNames == null)
            {
                throw new InvalidDataException("pastDisplayNames is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.PastDisplayNames = pastDisplayNames;
            }

            // to ensure "profilePicOverride" is required (not null)
            if (profilePicOverride == null)
            {
                throw new InvalidDataException("profilePicOverride is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.ProfilePicOverride = profilePicOverride;
            }

            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new InvalidDataException("state is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.State = state;
            }

            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.Status = status;
            }

            // to ensure "statusDescription" is required (not null)
            if (statusDescription == null)
            {
                throw new InvalidDataException("statusDescription is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.StatusDescription = statusDescription;
            }

            // to ensure "statusFirstTime" is required (not null)
            if (statusFirstTime == null)
            {
                throw new InvalidDataException("statusFirstTime is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.StatusFirstTime = statusFirstTime;
            }

            // to ensure "statusHistory" is required (not null)
            if (statusHistory == null)
            {
                throw new InvalidDataException("statusHistory is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.StatusHistory = statusHistory;
            }

            // to ensure "steamDetails" is required (not null)
            if (steamDetails == null)
            {
                throw new InvalidDataException("steamDetails is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.SteamDetails = steamDetails;
            }

            // to ensure "steamId" is required (not null)
            if (steamId == null)
            {
                throw new InvalidDataException("steamId is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.SteamId = steamId;
            }

            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new InvalidDataException("tags is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.Tags = tags;
            }

            // to ensure "twoFactorAuthEnabled" is required (not null)
            if (twoFactorAuthEnabled == null)
            {
                throw new InvalidDataException("twoFactorAuthEnabled is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.TwoFactorAuthEnabled = twoFactorAuthEnabled;
            }

            // to ensure "unsubscribe" is required (not null)
            if (unsubscribe == null)
            {
                throw new InvalidDataException("unsubscribe is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.Unsubscribe = unsubscribe;
            }

            // to ensure "userIcon" is required (not null)
            if (userIcon == null)
            {
                throw new InvalidDataException("userIcon is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.UserIcon = userIcon;
            }

            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for CurrentUser and cannot be null");
            }
            else
            {
                this.Username = username;
            }

            this.AccountDeletionDate = accountDeletionDate;
            this.ActiveFriends = activeFriends;
            this.FallbackAvatar = fallbackAvatar;
            this.OfflineFriends = offlineFriends;
            this.OnlineFriends = onlineFriends;
        }

        /// <summary>
        /// Gets or Sets AcceptedTOSVersion
        /// </summary>
        [DataMember(Name="acceptedTOSVersion", EmitDefaultValue=true)]
        public int AcceptedTOSVersion { get; set; }

        /// <summary>
        /// Gets or Sets AccountDeletionDate
        /// </summary>
        [DataMember(Name="accountDeletionDate", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? AccountDeletionDate { get; set; }

        /// <summary>
        /// Gets or Sets ActiveFriends
        /// </summary>
        [DataMember(Name="activeFriends", EmitDefaultValue=false)]
        public List<string> ActiveFriends { get; set; }

        /// <summary>
        /// Gets or Sets AllowAvatarCopying
        /// </summary>
        [DataMember(Name="allowAvatarCopying", EmitDefaultValue=true)]
        public bool AllowAvatarCopying { get; set; }

        /// <summary>
        /// Gets or Sets Bio
        /// </summary>
        [DataMember(Name="bio", EmitDefaultValue=true)]
        public string Bio { get; set; }

        /// <summary>
        /// Gets or Sets BioLinks
        /// </summary>
        [DataMember(Name="bioLinks", EmitDefaultValue=true)]
        public List<string> BioLinks { get; set; }

        /// <summary>
        /// Gets or Sets CurrentAvatar
        /// </summary>
        [DataMember(Name="currentAvatar", EmitDefaultValue=true)]
        public string CurrentAvatar { get; set; }

        /// <summary>
        /// Gets or Sets CurrentAvatarAssetUrl
        /// </summary>
        [DataMember(Name="currentAvatarAssetUrl", EmitDefaultValue=true)]
        public string CurrentAvatarAssetUrl { get; set; }

        /// <summary>
        /// Gets or Sets CurrentAvatarImageUrl
        /// </summary>
        [DataMember(Name="currentAvatarImageUrl", EmitDefaultValue=true)]
        public string CurrentAvatarImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets CurrentAvatarThumbnailImageUrl
        /// </summary>
        [DataMember(Name="currentAvatarThumbnailImageUrl", EmitDefaultValue=true)]
        public string CurrentAvatarThumbnailImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets DateJoined
        /// </summary>
        [DataMember(Name="date_joined", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateJoined { get; set; }


        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets EmailVerified
        /// </summary>
        [DataMember(Name="emailVerified", EmitDefaultValue=true)]
        public bool EmailVerified { get; set; }

        /// <summary>
        /// Gets or Sets FallbackAvatar
        /// </summary>
        [DataMember(Name="fallbackAvatar", EmitDefaultValue=false)]
        public string FallbackAvatar { get; set; }

        /// <summary>
        /// Always empty array.
        /// </summary>
        /// <value>Always empty array.</value>
        [DataMember(Name="friendGroupNames", EmitDefaultValue=true)]
        [Obsolete]
        public List<string> FriendGroupNames { get; set; }

        /// <summary>
        /// Gets or Sets FriendKey
        /// </summary>
        [DataMember(Name="friendKey", EmitDefaultValue=true)]
        public string FriendKey { get; set; }

        /// <summary>
        /// Gets or Sets Friends
        /// </summary>
        [DataMember(Name="friends", EmitDefaultValue=true)]
        public List<string> Friends { get; set; }

        /// <summary>
        /// Gets or Sets HasBirthday
        /// </summary>
        [DataMember(Name="hasBirthday", EmitDefaultValue=true)]
        public bool HasBirthday { get; set; }

        /// <summary>
        /// Gets or Sets HasEmail
        /// </summary>
        [DataMember(Name="hasEmail", EmitDefaultValue=true)]
        public bool HasEmail { get; set; }

        /// <summary>
        /// Gets or Sets HasLoggedInFromClient
        /// </summary>
        [DataMember(Name="hasLoggedInFromClient", EmitDefaultValue=true)]
        public bool HasLoggedInFromClient { get; set; }

        /// <summary>
        /// Gets or Sets HasPendingEmail
        /// </summary>
        [DataMember(Name="hasPendingEmail", EmitDefaultValue=true)]
        public bool HasPendingEmail { get; set; }

        /// <summary>
        /// Gets or Sets HomeLocation
        /// </summary>
        [DataMember(Name="homeLocation", EmitDefaultValue=true)]
        public string HomeLocation { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsFriend
        /// </summary>
        [DataMember(Name="isFriend", EmitDefaultValue=true)]
        public bool IsFriend { get; set; }

        /// <summary>
        /// Gets or Sets LastLogin
        /// </summary>
        [DataMember(Name="last_login", EmitDefaultValue=true)]
        public DateTime LastLogin { get; set; }

        /// <summary>
        /// This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.
        /// </summary>
        /// <value>This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.</value>
        [DataMember(Name="last_platform", EmitDefaultValue=true)]
        public string LastPlatform { get; set; }

        /// <summary>
        /// Gets or Sets ObfuscatedEmail
        /// </summary>
        [DataMember(Name="obfuscatedEmail", EmitDefaultValue=true)]
        public string ObfuscatedEmail { get; set; }

        /// <summary>
        /// Gets or Sets ObfuscatedPendingEmail
        /// </summary>
        [DataMember(Name="obfuscatedPendingEmail", EmitDefaultValue=true)]
        public string ObfuscatedPendingEmail { get; set; }

        /// <summary>
        /// Gets or Sets OculusId
        /// </summary>
        [DataMember(Name="oculusId", EmitDefaultValue=true)]
        public string OculusId { get; set; }

        /// <summary>
        /// Gets or Sets OfflineFriends
        /// </summary>
        [DataMember(Name="offlineFriends", EmitDefaultValue=false)]
        public List<string> OfflineFriends { get; set; }

        /// <summary>
        /// Gets or Sets OnlineFriends
        /// </summary>
        [DataMember(Name="onlineFriends", EmitDefaultValue=false)]
        public List<string> OnlineFriends { get; set; }

        /// <summary>
        /// Gets or Sets PastDisplayNames
        /// </summary>
        [DataMember(Name="pastDisplayNames", EmitDefaultValue=true)]
        public List<PastDisplayName> PastDisplayNames { get; set; }

        /// <summary>
        /// Gets or Sets ProfilePicOverride
        /// </summary>
        [DataMember(Name="profilePicOverride", EmitDefaultValue=true)]
        public string ProfilePicOverride { get; set; }



        /// <summary>
        /// Gets or Sets StatusDescription
        /// </summary>
        [DataMember(Name="statusDescription", EmitDefaultValue=true)]
        public string StatusDescription { get; set; }

        /// <summary>
        /// Gets or Sets StatusFirstTime
        /// </summary>
        [DataMember(Name="statusFirstTime", EmitDefaultValue=true)]
        public bool StatusFirstTime { get; set; }

        /// <summary>
        /// Gets or Sets StatusHistory
        /// </summary>
        [DataMember(Name="statusHistory", EmitDefaultValue=true)]
        public List<string> StatusHistory { get; set; }

        /// <summary>
        /// Gets or Sets SteamDetails
        /// </summary>
        [DataMember(Name="steamDetails", EmitDefaultValue=true)]
        public Object SteamDetails { get; set; }

        /// <summary>
        /// Gets or Sets SteamId
        /// </summary>
        [DataMember(Name="steamId", EmitDefaultValue=true)]
        public string SteamId { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets TwoFactorAuthEnabled
        /// </summary>
        [DataMember(Name="twoFactorAuthEnabled", EmitDefaultValue=true)]
        public bool TwoFactorAuthEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Unsubscribe
        /// </summary>
        [DataMember(Name="unsubscribe", EmitDefaultValue=true)]
        public bool Unsubscribe { get; set; }

        /// <summary>
        /// Gets or Sets UserIcon
        /// </summary>
        [DataMember(Name="userIcon", EmitDefaultValue=true)]
        public string UserIcon { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=true)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrentUser {\n");
            sb.Append("  AcceptedTOSVersion: ").Append(AcceptedTOSVersion).Append("\n");
            sb.Append("  AccountDeletionDate: ").Append(AccountDeletionDate).Append("\n");
            sb.Append("  ActiveFriends: ").Append(ActiveFriends).Append("\n");
            sb.Append("  AllowAvatarCopying: ").Append(AllowAvatarCopying).Append("\n");
            sb.Append("  Bio: ").Append(Bio).Append("\n");
            sb.Append("  BioLinks: ").Append(BioLinks).Append("\n");
            sb.Append("  CurrentAvatar: ").Append(CurrentAvatar).Append("\n");
            sb.Append("  CurrentAvatarAssetUrl: ").Append(CurrentAvatarAssetUrl).Append("\n");
            sb.Append("  CurrentAvatarImageUrl: ").Append(CurrentAvatarImageUrl).Append("\n");
            sb.Append("  CurrentAvatarThumbnailImageUrl: ").Append(CurrentAvatarThumbnailImageUrl).Append("\n");
            sb.Append("  DateJoined: ").Append(DateJoined).Append("\n");
            sb.Append("  DeveloperType: ").Append(DeveloperType).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  EmailVerified: ").Append(EmailVerified).Append("\n");
            sb.Append("  FallbackAvatar: ").Append(FallbackAvatar).Append("\n");
            sb.Append("  FriendGroupNames: ").Append(FriendGroupNames).Append("\n");
            sb.Append("  FriendKey: ").Append(FriendKey).Append("\n");
            sb.Append("  Friends: ").Append(Friends).Append("\n");
            sb.Append("  HasBirthday: ").Append(HasBirthday).Append("\n");
            sb.Append("  HasEmail: ").Append(HasEmail).Append("\n");
            sb.Append("  HasLoggedInFromClient: ").Append(HasLoggedInFromClient).Append("\n");
            sb.Append("  HasPendingEmail: ").Append(HasPendingEmail).Append("\n");
            sb.Append("  HomeLocation: ").Append(HomeLocation).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsFriend: ").Append(IsFriend).Append("\n");
            sb.Append("  LastLogin: ").Append(LastLogin).Append("\n");
            sb.Append("  LastPlatform: ").Append(LastPlatform).Append("\n");
            sb.Append("  ObfuscatedEmail: ").Append(ObfuscatedEmail).Append("\n");
            sb.Append("  ObfuscatedPendingEmail: ").Append(ObfuscatedPendingEmail).Append("\n");
            sb.Append("  OculusId: ").Append(OculusId).Append("\n");
            sb.Append("  OfflineFriends: ").Append(OfflineFriends).Append("\n");
            sb.Append("  OnlineFriends: ").Append(OnlineFriends).Append("\n");
            sb.Append("  PastDisplayNames: ").Append(PastDisplayNames).Append("\n");
            sb.Append("  ProfilePicOverride: ").Append(ProfilePicOverride).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  StatusFirstTime: ").Append(StatusFirstTime).Append("\n");
            sb.Append("  StatusHistory: ").Append(StatusHistory).Append("\n");
            sb.Append("  SteamDetails: ").Append(SteamDetails).Append("\n");
            sb.Append("  SteamId: ").Append(SteamId).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TwoFactorAuthEnabled: ").Append(TwoFactorAuthEnabled).Append("\n");
            sb.Append("  Unsubscribe: ").Append(Unsubscribe).Append("\n");
            sb.Append("  UserIcon: ").Append(UserIcon).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrentUser);
        }

        /// <summary>
        /// Returns true if CurrentUser instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrentUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrentUser input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptedTOSVersion == input.AcceptedTOSVersion ||
                    (this.AcceptedTOSVersion != null &&
                    this.AcceptedTOSVersion.Equals(input.AcceptedTOSVersion))
                ) && 
                (
                    this.AccountDeletionDate == input.AccountDeletionDate ||
                    (this.AccountDeletionDate != null &&
                    this.AccountDeletionDate.Equals(input.AccountDeletionDate))
                ) && 
                (
                    this.ActiveFriends == input.ActiveFriends ||
                    this.ActiveFriends != null &&
                    input.ActiveFriends != null &&
                    this.ActiveFriends.SequenceEqual(input.ActiveFriends)
                ) && 
                (
                    this.AllowAvatarCopying == input.AllowAvatarCopying ||
                    (this.AllowAvatarCopying != null &&
                    this.AllowAvatarCopying.Equals(input.AllowAvatarCopying))
                ) && 
                (
                    this.Bio == input.Bio ||
                    (this.Bio != null &&
                    this.Bio.Equals(input.Bio))
                ) && 
                (
                    this.BioLinks == input.BioLinks ||
                    this.BioLinks != null &&
                    input.BioLinks != null &&
                    this.BioLinks.SequenceEqual(input.BioLinks)
                ) && 
                (
                    this.CurrentAvatar == input.CurrentAvatar ||
                    (this.CurrentAvatar != null &&
                    this.CurrentAvatar.Equals(input.CurrentAvatar))
                ) && 
                (
                    this.CurrentAvatarAssetUrl == input.CurrentAvatarAssetUrl ||
                    (this.CurrentAvatarAssetUrl != null &&
                    this.CurrentAvatarAssetUrl.Equals(input.CurrentAvatarAssetUrl))
                ) && 
                (
                    this.CurrentAvatarImageUrl == input.CurrentAvatarImageUrl ||
                    (this.CurrentAvatarImageUrl != null &&
                    this.CurrentAvatarImageUrl.Equals(input.CurrentAvatarImageUrl))
                ) && 
                (
                    this.CurrentAvatarThumbnailImageUrl == input.CurrentAvatarThumbnailImageUrl ||
                    (this.CurrentAvatarThumbnailImageUrl != null &&
                    this.CurrentAvatarThumbnailImageUrl.Equals(input.CurrentAvatarThumbnailImageUrl))
                ) && 
                (
                    this.DateJoined == input.DateJoined ||
                    (this.DateJoined != null &&
                    this.DateJoined.Equals(input.DateJoined))
                ) && 
                (
                    this.DeveloperType == input.DeveloperType ||
                    (this.DeveloperType != null &&
                    this.DeveloperType.Equals(input.DeveloperType))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.EmailVerified == input.EmailVerified ||
                    (this.EmailVerified != null &&
                    this.EmailVerified.Equals(input.EmailVerified))
                ) && 
                (
                    this.FallbackAvatar == input.FallbackAvatar ||
                    (this.FallbackAvatar != null &&
                    this.FallbackAvatar.Equals(input.FallbackAvatar))
                ) && 
                (
                    this.FriendGroupNames == input.FriendGroupNames ||
                    this.FriendGroupNames != null &&
                    input.FriendGroupNames != null &&
                    this.FriendGroupNames.SequenceEqual(input.FriendGroupNames)
                ) && 
                (
                    this.FriendKey == input.FriendKey ||
                    (this.FriendKey != null &&
                    this.FriendKey.Equals(input.FriendKey))
                ) && 
                (
                    this.Friends == input.Friends ||
                    this.Friends != null &&
                    input.Friends != null &&
                    this.Friends.SequenceEqual(input.Friends)
                ) && 
                (
                    this.HasBirthday == input.HasBirthday ||
                    (this.HasBirthday != null &&
                    this.HasBirthday.Equals(input.HasBirthday))
                ) && 
                (
                    this.HasEmail == input.HasEmail ||
                    (this.HasEmail != null &&
                    this.HasEmail.Equals(input.HasEmail))
                ) && 
                (
                    this.HasLoggedInFromClient == input.HasLoggedInFromClient ||
                    (this.HasLoggedInFromClient != null &&
                    this.HasLoggedInFromClient.Equals(input.HasLoggedInFromClient))
                ) && 
                (
                    this.HasPendingEmail == input.HasPendingEmail ||
                    (this.HasPendingEmail != null &&
                    this.HasPendingEmail.Equals(input.HasPendingEmail))
                ) && 
                (
                    this.HomeLocation == input.HomeLocation ||
                    (this.HomeLocation != null &&
                    this.HomeLocation.Equals(input.HomeLocation))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsFriend == input.IsFriend ||
                    (this.IsFriend != null &&
                    this.IsFriend.Equals(input.IsFriend))
                ) && 
                (
                    this.LastLogin == input.LastLogin ||
                    (this.LastLogin != null &&
                    this.LastLogin.Equals(input.LastLogin))
                ) && 
                (
                    this.LastPlatform == input.LastPlatform ||
                    (this.LastPlatform != null &&
                    this.LastPlatform.Equals(input.LastPlatform))
                ) && 
                (
                    this.ObfuscatedEmail == input.ObfuscatedEmail ||
                    (this.ObfuscatedEmail != null &&
                    this.ObfuscatedEmail.Equals(input.ObfuscatedEmail))
                ) && 
                (
                    this.ObfuscatedPendingEmail == input.ObfuscatedPendingEmail ||
                    (this.ObfuscatedPendingEmail != null &&
                    this.ObfuscatedPendingEmail.Equals(input.ObfuscatedPendingEmail))
                ) && 
                (
                    this.OculusId == input.OculusId ||
                    (this.OculusId != null &&
                    this.OculusId.Equals(input.OculusId))
                ) && 
                (
                    this.OfflineFriends == input.OfflineFriends ||
                    this.OfflineFriends != null &&
                    input.OfflineFriends != null &&
                    this.OfflineFriends.SequenceEqual(input.OfflineFriends)
                ) && 
                (
                    this.OnlineFriends == input.OnlineFriends ||
                    this.OnlineFriends != null &&
                    input.OnlineFriends != null &&
                    this.OnlineFriends.SequenceEqual(input.OnlineFriends)
                ) && 
                (
                    this.PastDisplayNames == input.PastDisplayNames ||
                    this.PastDisplayNames != null &&
                    input.PastDisplayNames != null &&
                    this.PastDisplayNames.SequenceEqual(input.PastDisplayNames)
                ) && 
                (
                    this.ProfilePicOverride == input.ProfilePicOverride ||
                    (this.ProfilePicOverride != null &&
                    this.ProfilePicOverride.Equals(input.ProfilePicOverride))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusDescription == input.StatusDescription ||
                    (this.StatusDescription != null &&
                    this.StatusDescription.Equals(input.StatusDescription))
                ) && 
                (
                    this.StatusFirstTime == input.StatusFirstTime ||
                    (this.StatusFirstTime != null &&
                    this.StatusFirstTime.Equals(input.StatusFirstTime))
                ) && 
                (
                    this.StatusHistory == input.StatusHistory ||
                    this.StatusHistory != null &&
                    input.StatusHistory != null &&
                    this.StatusHistory.SequenceEqual(input.StatusHistory)
                ) && 
                (
                    this.SteamDetails == input.SteamDetails ||
                    (this.SteamDetails != null &&
                    this.SteamDetails.Equals(input.SteamDetails))
                ) && 
                (
                    this.SteamId == input.SteamId ||
                    (this.SteamId != null &&
                    this.SteamId.Equals(input.SteamId))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TwoFactorAuthEnabled == input.TwoFactorAuthEnabled ||
                    (this.TwoFactorAuthEnabled != null &&
                    this.TwoFactorAuthEnabled.Equals(input.TwoFactorAuthEnabled))
                ) && 
                (
                    this.Unsubscribe == input.Unsubscribe ||
                    (this.Unsubscribe != null &&
                    this.Unsubscribe.Equals(input.Unsubscribe))
                ) && 
                (
                    this.UserIcon == input.UserIcon ||
                    (this.UserIcon != null &&
                    this.UserIcon.Equals(input.UserIcon))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptedTOSVersion != null)
                    hashCode = hashCode * 59 + this.AcceptedTOSVersion.GetHashCode();
                if (this.AccountDeletionDate != null)
                    hashCode = hashCode * 59 + this.AccountDeletionDate.GetHashCode();
                if (this.ActiveFriends != null)
                    hashCode = hashCode * 59 + this.ActiveFriends.GetHashCode();
                if (this.AllowAvatarCopying != null)
                    hashCode = hashCode * 59 + this.AllowAvatarCopying.GetHashCode();
                if (this.Bio != null)
                    hashCode = hashCode * 59 + this.Bio.GetHashCode();
                if (this.BioLinks != null)
                    hashCode = hashCode * 59 + this.BioLinks.GetHashCode();
                if (this.CurrentAvatar != null)
                    hashCode = hashCode * 59 + this.CurrentAvatar.GetHashCode();
                if (this.CurrentAvatarAssetUrl != null)
                    hashCode = hashCode * 59 + this.CurrentAvatarAssetUrl.GetHashCode();
                if (this.CurrentAvatarImageUrl != null)
                    hashCode = hashCode * 59 + this.CurrentAvatarImageUrl.GetHashCode();
                if (this.CurrentAvatarThumbnailImageUrl != null)
                    hashCode = hashCode * 59 + this.CurrentAvatarThumbnailImageUrl.GetHashCode();
                if (this.DateJoined != null)
                    hashCode = hashCode * 59 + this.DateJoined.GetHashCode();
                if (this.DeveloperType != null)
                    hashCode = hashCode * 59 + this.DeveloperType.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.EmailVerified != null)
                    hashCode = hashCode * 59 + this.EmailVerified.GetHashCode();
                if (this.FallbackAvatar != null)
                    hashCode = hashCode * 59 + this.FallbackAvatar.GetHashCode();
                if (this.FriendGroupNames != null)
                    hashCode = hashCode * 59 + this.FriendGroupNames.GetHashCode();
                if (this.FriendKey != null)
                    hashCode = hashCode * 59 + this.FriendKey.GetHashCode();
                if (this.Friends != null)
                    hashCode = hashCode * 59 + this.Friends.GetHashCode();
                if (this.HasBirthday != null)
                    hashCode = hashCode * 59 + this.HasBirthday.GetHashCode();
                if (this.HasEmail != null)
                    hashCode = hashCode * 59 + this.HasEmail.GetHashCode();
                if (this.HasLoggedInFromClient != null)
                    hashCode = hashCode * 59 + this.HasLoggedInFromClient.GetHashCode();
                if (this.HasPendingEmail != null)
                    hashCode = hashCode * 59 + this.HasPendingEmail.GetHashCode();
                if (this.HomeLocation != null)
                    hashCode = hashCode * 59 + this.HomeLocation.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsFriend != null)
                    hashCode = hashCode * 59 + this.IsFriend.GetHashCode();
                if (this.LastLogin != null)
                    hashCode = hashCode * 59 + this.LastLogin.GetHashCode();
                if (this.LastPlatform != null)
                    hashCode = hashCode * 59 + this.LastPlatform.GetHashCode();
                if (this.ObfuscatedEmail != null)
                    hashCode = hashCode * 59 + this.ObfuscatedEmail.GetHashCode();
                if (this.ObfuscatedPendingEmail != null)
                    hashCode = hashCode * 59 + this.ObfuscatedPendingEmail.GetHashCode();
                if (this.OculusId != null)
                    hashCode = hashCode * 59 + this.OculusId.GetHashCode();
                if (this.OfflineFriends != null)
                    hashCode = hashCode * 59 + this.OfflineFriends.GetHashCode();
                if (this.OnlineFriends != null)
                    hashCode = hashCode * 59 + this.OnlineFriends.GetHashCode();
                if (this.PastDisplayNames != null)
                    hashCode = hashCode * 59 + this.PastDisplayNames.GetHashCode();
                if (this.ProfilePicOverride != null)
                    hashCode = hashCode * 59 + this.ProfilePicOverride.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusDescription != null)
                    hashCode = hashCode * 59 + this.StatusDescription.GetHashCode();
                if (this.StatusFirstTime != null)
                    hashCode = hashCode * 59 + this.StatusFirstTime.GetHashCode();
                if (this.StatusHistory != null)
                    hashCode = hashCode * 59 + this.StatusHistory.GetHashCode();
                if (this.SteamDetails != null)
                    hashCode = hashCode * 59 + this.SteamDetails.GetHashCode();
                if (this.SteamId != null)
                    hashCode = hashCode * 59 + this.SteamId.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.TwoFactorAuthEnabled != null)
                    hashCode = hashCode * 59 + this.TwoFactorAuthEnabled.GetHashCode();
                if (this.Unsubscribe != null)
                    hashCode = hashCode * 59 + this.Unsubscribe.GetHashCode();
                if (this.UserIcon != null)
                    hashCode = hashCode * 59 + this.UserIcon.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // AcceptedTOSVersion (int) minimum
            if(this.AcceptedTOSVersion < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AcceptedTOSVersion, must be a value greater than or equal to 0.", new [] { "AcceptedTOSVersion" });
            }



            // CurrentAvatar (string) pattern
            Regex regexCurrentAvatar = new Regex(@"avtr_[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}", RegexOptions.CultureInvariant);
            if (false == regexCurrentAvatar.Match(this.CurrentAvatar).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrentAvatar, must match a pattern of " + regexCurrentAvatar, new [] { "CurrentAvatar" });
            }



            // FallbackAvatar (string) pattern
            Regex regexFallbackAvatar = new Regex(@"avtr_[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}", RegexOptions.CultureInvariant);
            if (false == regexFallbackAvatar.Match(this.FallbackAvatar).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FallbackAvatar, must match a pattern of " + regexFallbackAvatar, new [] { "FallbackAvatar" });
            }



            // HomeLocation (string) pattern
            Regex regexHomeLocation = new Regex(@"(^$|offline|(wrld|wld)_[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12})", RegexOptions.CultureInvariant);
            if (false == regexHomeLocation.Match(this.HomeLocation).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HomeLocation, must match a pattern of " + regexHomeLocation, new [] { "HomeLocation" });
            }

            yield break;
        }
    }

}
