/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: me@ruby.js.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = io.github.vrchatapi.Client.OpenAPIDateConverter;

namespace io.github.vrchatapi.Model
{
    /// <summary>
    /// InlineObject8
    /// </summary>
    [DataContract]
    public partial class InlineObject8 :  IEquatable<InlineObject8>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public FavoriteType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject8" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineObject8() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject8" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="favoriteId">Must be either AvatarID, WorldID or UserID. (required).</param>
        /// <param name="tags">Tags indicate which group this favorite belongs to. Adding multiple groups makes it show up in all. Removing it from one in that case removes it from all. (required).</param>
        public InlineObject8(FavoriteType type = default(FavoriteType), string favoriteId = default(string), List<string> tags = default(List<string>))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for InlineObject8 and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            // to ensure "favoriteId" is required (not null)
            if (favoriteId == null)
            {
                throw new InvalidDataException("favoriteId is a required property for InlineObject8 and cannot be null");
            }
            else
            {
                this.FavoriteId = favoriteId;
            }

            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new InvalidDataException("tags is a required property for InlineObject8 and cannot be null");
            }
            else
            {
                this.Tags = tags;
            }

        }


        /// <summary>
        /// Must be either AvatarID, WorldID or UserID.
        /// </summary>
        /// <value>Must be either AvatarID, WorldID or UserID.</value>
        [DataMember(Name="favoriteId", EmitDefaultValue=true)]
        public string FavoriteId { get; set; }

        /// <summary>
        /// Tags indicate which group this favorite belongs to. Adding multiple groups makes it show up in all. Removing it from one in that case removes it from all.
        /// </summary>
        /// <value>Tags indicate which group this favorite belongs to. Adding multiple groups makes it show up in all. Removing it from one in that case removes it from all.</value>
        [DataMember(Name="tags", EmitDefaultValue=true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject8 {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FavoriteId: ").Append(FavoriteId).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject8);
        }

        /// <summary>
        /// Returns true if InlineObject8 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject8 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject8 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FavoriteId == input.FavoriteId ||
                    (this.FavoriteId != null &&
                    this.FavoriteId.Equals(input.FavoriteId))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.FavoriteId != null)
                    hashCode = hashCode * 59 + this.FavoriteId.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
