/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.5.2
 * Contact: me@ruby.js.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = io.github.vrchatapi.Client.OpenAPIDateConverter;

namespace io.github.vrchatapi.Model
{
    /// <summary>
    /// Instance
    /// </summary>
    [DataContract]
    public partial class Instance :  IEquatable<Instance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Instance" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Instance() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Instance" /> class.
        /// </summary>
        /// <param name="active">active (required) (default to true).</param>
        /// <param name="canRequestInvite">canRequestInvite (required) (default to true).</param>
        /// <param name="capacity">capacity (required).</param>
        /// <param name="clientNumber">clientNumber (required).</param>
        /// <param name="full">full (required) (default to false).</param>
        /// <param name="id">id (required).</param>
        /// <param name="instanceId">instanceId (required).</param>
        /// <param name="location">location (required).</param>
        /// <param name="nUsers">nUsers (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="nonce">nonce.</param>
        /// <param name="ownerId">ownerId.</param>
        /// <param name="permanent">permanent (required) (default to false).</param>
        /// <param name="photonRegion">photonRegion (required).</param>
        /// <param name="platforms">platforms (required).</param>
        /// <param name="region">region (required).</param>
        /// <param name="shortName">shortName (required).</param>
        /// <param name="tags">tags (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="users">Always empty on non-existing instances, and non-present on existing instances..</param>
        /// <param name="world">Only present on non-existing instances, and only contains a very small subject of World object. Use World API instead..</param>
        /// <param name="worldId">worldId (required).</param>
        public Instance(bool active = true, bool canRequestInvite = true, int capacity = default(int), string clientNumber = default(string), bool full = false, string id = default(string), string instanceId = default(string), string location = default(string), int nUsers = default(int), string name = default(string), string nonce = default(string), string ownerId = default(string), bool permanent = false, string photonRegion = default(string), InstancePlatforms platforms = default(InstancePlatforms), string region = default(string), string shortName = default(string), List<string> tags = default(List<string>), string type = default(string), List<Object> users = default(List<Object>), Object world = default(Object), string worldId = default(string))
        {
            // to ensure "active" is required (not null)
            if (active == null)
            {
                throw new InvalidDataException("active is a required property for Instance and cannot be null");
            }
            else
            {
                this.Active = active;
            }

            // to ensure "canRequestInvite" is required (not null)
            if (canRequestInvite == null)
            {
                throw new InvalidDataException("canRequestInvite is a required property for Instance and cannot be null");
            }
            else
            {
                this.CanRequestInvite = canRequestInvite;
            }

            // to ensure "capacity" is required (not null)
            if (capacity == null)
            {
                throw new InvalidDataException("capacity is a required property for Instance and cannot be null");
            }
            else
            {
                this.Capacity = capacity;
            }

            // to ensure "clientNumber" is required (not null)
            if (clientNumber == null)
            {
                throw new InvalidDataException("clientNumber is a required property for Instance and cannot be null");
            }
            else
            {
                this.ClientNumber = clientNumber;
            }

            // to ensure "full" is required (not null)
            if (full == null)
            {
                throw new InvalidDataException("full is a required property for Instance and cannot be null");
            }
            else
            {
                this.Full = full;
            }

            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Instance and cannot be null");
            }
            else
            {
                this.Id = id;
            }

            // to ensure "instanceId" is required (not null)
            if (instanceId == null)
            {
                throw new InvalidDataException("instanceId is a required property for Instance and cannot be null");
            }
            else
            {
                this.InstanceId = instanceId;
            }

            // to ensure "location" is required (not null)
            if (location == null)
            {
                throw new InvalidDataException("location is a required property for Instance and cannot be null");
            }
            else
            {
                this.Location = location;
            }

            // to ensure "nUsers" is required (not null)
            if (nUsers == null)
            {
                throw new InvalidDataException("nUsers is a required property for Instance and cannot be null");
            }
            else
            {
                this.NUsers = nUsers;
            }

            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Instance and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "permanent" is required (not null)
            if (permanent == null)
            {
                throw new InvalidDataException("permanent is a required property for Instance and cannot be null");
            }
            else
            {
                this.Permanent = permanent;
            }

            // to ensure "photonRegion" is required (not null)
            if (photonRegion == null)
            {
                throw new InvalidDataException("photonRegion is a required property for Instance and cannot be null");
            }
            else
            {
                this.PhotonRegion = photonRegion;
            }

            // to ensure "platforms" is required (not null)
            if (platforms == null)
            {
                throw new InvalidDataException("platforms is a required property for Instance and cannot be null");
            }
            else
            {
                this.Platforms = platforms;
            }

            // to ensure "region" is required (not null)
            if (region == null)
            {
                throw new InvalidDataException("region is a required property for Instance and cannot be null");
            }
            else
            {
                this.Region = region;
            }

            // to ensure "shortName" is required (not null)
            if (shortName == null)
            {
                throw new InvalidDataException("shortName is a required property for Instance and cannot be null");
            }
            else
            {
                this.ShortName = shortName;
            }

            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new InvalidDataException("tags is a required property for Instance and cannot be null");
            }
            else
            {
                this.Tags = tags;
            }

            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Instance and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            // to ensure "worldId" is required (not null)
            if (worldId == null)
            {
                throw new InvalidDataException("worldId is a required property for Instance and cannot be null");
            }
            else
            {
                this.WorldId = worldId;
            }

            this.Nonce = nonce;
            this.OwnerId = ownerId;
            this.Users = users;
            this.World = world;
        }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets CanRequestInvite
        /// </summary>
        [DataMember(Name="canRequestInvite", EmitDefaultValue=true)]
        public bool CanRequestInvite { get; set; }

        /// <summary>
        /// Gets or Sets Capacity
        /// </summary>
        [DataMember(Name="capacity", EmitDefaultValue=true)]
        public int Capacity { get; set; }

        /// <summary>
        /// Gets or Sets ClientNumber
        /// </summary>
        [DataMember(Name="clientNumber", EmitDefaultValue=true)]
        public string ClientNumber { get; set; }

        /// <summary>
        /// Gets or Sets Full
        /// </summary>
        [DataMember(Name="full", EmitDefaultValue=true)]
        public bool Full { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets InstanceId
        /// </summary>
        [DataMember(Name="instanceId", EmitDefaultValue=true)]
        public string InstanceId { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=true)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets NUsers
        /// </summary>
        [DataMember(Name="n_users", EmitDefaultValue=true)]
        public int NUsers { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Nonce
        /// </summary>
        [DataMember(Name="nonce", EmitDefaultValue=false)]
        public string Nonce { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [DataMember(Name="ownerId", EmitDefaultValue=false)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets Permanent
        /// </summary>
        [DataMember(Name="permanent", EmitDefaultValue=true)]
        public bool Permanent { get; set; }

        /// <summary>
        /// Gets or Sets PhotonRegion
        /// </summary>
        [DataMember(Name="photonRegion", EmitDefaultValue=true)]
        public string PhotonRegion { get; set; }

        /// <summary>
        /// Gets or Sets Platforms
        /// </summary>
        [DataMember(Name="platforms", EmitDefaultValue=true)]
        public InstancePlatforms Platforms { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name="region", EmitDefaultValue=true)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name="shortName", EmitDefaultValue=true)]
        public string ShortName { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public string Type { get; set; }

        /// <summary>
        /// Always empty on non-existing instances, and non-present on existing instances.
        /// </summary>
        /// <value>Always empty on non-existing instances, and non-present on existing instances.</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        [Obsolete]
        public List<Object> Users { get; set; }

        /// <summary>
        /// Only present on non-existing instances, and only contains a very small subject of World object. Use World API instead.
        /// </summary>
        /// <value>Only present on non-existing instances, and only contains a very small subject of World object. Use World API instead.</value>
        [DataMember(Name="world", EmitDefaultValue=false)]
        [Obsolete]
        public Object World { get; set; }

        /// <summary>
        /// Gets or Sets WorldId
        /// </summary>
        [DataMember(Name="worldId", EmitDefaultValue=true)]
        public string WorldId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Instance {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  CanRequestInvite: ").Append(CanRequestInvite).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  ClientNumber: ").Append(ClientNumber).Append("\n");
            sb.Append("  Full: ").Append(Full).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  NUsers: ").Append(NUsers).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Permanent: ").Append(Permanent).Append("\n");
            sb.Append("  PhotonRegion: ").Append(PhotonRegion).Append("\n");
            sb.Append("  Platforms: ").Append(Platforms).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  World: ").Append(World).Append("\n");
            sb.Append("  WorldId: ").Append(WorldId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Instance);
        }

        /// <summary>
        /// Returns true if Instance instances are equal
        /// </summary>
        /// <param name="input">Instance of Instance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Instance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.CanRequestInvite == input.CanRequestInvite ||
                    (this.CanRequestInvite != null &&
                    this.CanRequestInvite.Equals(input.CanRequestInvite))
                ) && 
                (
                    this.Capacity == input.Capacity ||
                    (this.Capacity != null &&
                    this.Capacity.Equals(input.Capacity))
                ) && 
                (
                    this.ClientNumber == input.ClientNumber ||
                    (this.ClientNumber != null &&
                    this.ClientNumber.Equals(input.ClientNumber))
                ) && 
                (
                    this.Full == input.Full ||
                    (this.Full != null &&
                    this.Full.Equals(input.Full))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.NUsers == input.NUsers ||
                    (this.NUsers != null &&
                    this.NUsers.Equals(input.NUsers))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.Permanent == input.Permanent ||
                    (this.Permanent != null &&
                    this.Permanent.Equals(input.Permanent))
                ) && 
                (
                    this.PhotonRegion == input.PhotonRegion ||
                    (this.PhotonRegion != null &&
                    this.PhotonRegion.Equals(input.PhotonRegion))
                ) && 
                (
                    this.Platforms == input.Platforms ||
                    (this.Platforms != null &&
                    this.Platforms.Equals(input.Platforms))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    input.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                ) && 
                (
                    this.World == input.World ||
                    (this.World != null &&
                    this.World.Equals(input.World))
                ) && 
                (
                    this.WorldId == input.WorldId ||
                    (this.WorldId != null &&
                    this.WorldId.Equals(input.WorldId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.CanRequestInvite != null)
                    hashCode = hashCode * 59 + this.CanRequestInvite.GetHashCode();
                if (this.Capacity != null)
                    hashCode = hashCode * 59 + this.Capacity.GetHashCode();
                if (this.ClientNumber != null)
                    hashCode = hashCode * 59 + this.ClientNumber.GetHashCode();
                if (this.Full != null)
                    hashCode = hashCode * 59 + this.Full.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InstanceId != null)
                    hashCode = hashCode * 59 + this.InstanceId.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.NUsers != null)
                    hashCode = hashCode * 59 + this.NUsers.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Nonce != null)
                    hashCode = hashCode * 59 + this.Nonce.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                if (this.Permanent != null)
                    hashCode = hashCode * 59 + this.Permanent.GetHashCode();
                if (this.PhotonRegion != null)
                    hashCode = hashCode * 59 + this.PhotonRegion.GetHashCode();
                if (this.Platforms != null)
                    hashCode = hashCode * 59 + this.Platforms.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                if (this.ShortName != null)
                    hashCode = hashCode * 59 + this.ShortName.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.World != null)
                    hashCode = hashCode * 59 + this.World.GetHashCode();
                if (this.WorldId != null)
                    hashCode = hashCode * 59 + this.WorldId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // Capacity (int) minimum
            if(this.Capacity < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Capacity, must be a value greater than or equal to 0.", new [] { "Capacity" });
            }


            // ClientNumber (string) minLength
            if(this.ClientNumber != null && this.ClientNumber.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClientNumber, length must be greater than 1.", new [] { "ClientNumber" });
            }



            // Id (string) pattern
            Regex regexId = new Regex(@"(wrld|wld)_[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}:(\\d+)(~region\\(([\\w]+)\\))?(~([\\w]+)\\(usr_([\\w-]+)\\)((\\~canRequestInvite)?)(~region\\(([\\w].+)\\))?~nonce\\((.+)\\))?", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }


            // InstanceId (string) minLength
            if(this.InstanceId != null && this.InstanceId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstanceId, length must be greater than 1.", new [] { "InstanceId" });
            }


            // Location (string) minLength
            if(this.Location != null && this.Location.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Location, length must be greater than 1.", new [] { "Location" });
            }



            // NUsers (int) minimum
            if(this.NUsers < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NUsers, must be a value greater than or equal to 0.", new [] { "NUsers" });
            }


            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }


            // Nonce (string) minLength
            if(this.Nonce != null && this.Nonce.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Nonce, length must be greater than 1.", new [] { "Nonce" });
            }


            // PhotonRegion (string) minLength
            if(this.PhotonRegion != null && this.PhotonRegion.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhotonRegion, length must be greater than 1.", new [] { "PhotonRegion" });
            }


            // Region (string) minLength
            if(this.Region != null && this.Region.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Region, length must be greater than 1.", new [] { "Region" });
            }


            // ShortName (string) minLength
            if(this.ShortName != null && this.ShortName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShortName, length must be greater than 1.", new [] { "ShortName" });
            }


            // Type (string) minLength
            if(this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }



            // WorldId (string) pattern
            Regex regexWorldId = new Regex(@"(^$|offline|(wrld|wld)_[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12})", RegexOptions.CultureInvariant);
            if (false == regexWorldId.Match(this.WorldId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WorldId, must match a pattern of " + regexWorldId, new [] { "WorldId" });
            }

            yield break;
        }
    }

}
