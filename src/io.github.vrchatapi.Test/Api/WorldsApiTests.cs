/*
 * VRChat API Documentation
 *
 * ![VRChat API Banner](https://raw.githubusercontent.com/vrchatapi/vrchatapi.github.io/master/assets/apibanner.png)  # VRChat API Documentation This project is an [OPEN Open Source Project](https://openopensource.org)  Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.  ## Disclaimer  This is the official response of the VRChat Team (from Tupper more specifically) on the usage of the VRChat API.  > **Use of the API using applications other than the approved methods (website, VRChat application) are not officially supported. You may use the API for your own application, but keep these guidelines in mind:** > * We do not provide documentation or support for the API. > * Do not make queries to the API more than once per 60 seconds. > * Abuse of the API may result in account termination. > * Access to API endpoints may break at any given time, with no warning.  As stated, this documentation was not created with the help of the official VRChat team. Therefore this documentation is not an official documentation of the VRChat API and may not be always up to date with the latest versions. If you find that a page or endpoint is not longer valid please create an issue and tell us so we can fix it.  ## Get in touch with us!  [https://discord.gg/qjZE9C9fkB#vrchat-api](https://discord.gg/qjZE9C9fkB)
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: me@ruby.js.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using io.github.vrchatapi.Client;
using io.github.vrchatapi.Api;
using io.github.vrchatapi.Model;

namespace io.github.vrchatapi.Test
{
    /// <summary>
    ///  Class for testing WorldsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WorldsApiTests
    {
        private WorldsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new WorldsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of WorldsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' WorldsApi
            //Assert.IsInstanceOf(typeof(WorldsApi), instance);
        }

        
        /// <summary>
        /// Test CreateWorld
        /// </summary>
        [Test]
        public void CreateWorldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject5 inlineObject5 = null;
            //var response = instance.CreateWorld(inlineObject5);
            //Assert.IsInstanceOf(typeof(World), response, "response is World");
        }
        
        /// <summary>
        /// Test DeleteWorld
        /// </summary>
        [Test]
        public void DeleteWorldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string worldId = null;
            //instance.DeleteWorld(worldId);
            
        }
        
        /// <summary>
        /// Test GetActiveWorlds
        /// </summary>
        [Test]
        public void GetActiveWorldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string featured = null;
            //string sort = null;
            //int? n = null;
            //string order = null;
            //int? offset = null;
            //string search = null;
            //string tag = null;
            //string notag = null;
            //string releaseStatus = null;
            //string maxUnityVersion = null;
            //string minUnityVersion = null;
            //string platform = null;
            //var response = instance.GetActiveWorlds(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform);
            //Assert.IsInstanceOf(typeof(List<LimitedWorld>), response, "response is List<LimitedWorld>");
        }
        
        /// <summary>
        /// Test GetFavoritedWorlds
        /// </summary>
        [Test]
        public void GetFavoritedWorldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string featured = null;
            //string sort = null;
            //int? n = null;
            //string order = null;
            //int? offset = null;
            //string search = null;
            //string tag = null;
            //string notag = null;
            //string releaseStatus = null;
            //string maxUnityVersion = null;
            //string minUnityVersion = null;
            //string platform = null;
            //string userId = null;
            //var response = instance.GetFavoritedWorlds(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId);
            //Assert.IsInstanceOf(typeof(List<LimitedWorld>), response, "response is List<LimitedWorld>");
        }
        
        /// <summary>
        /// Test GetRecentWorlds
        /// </summary>
        [Test]
        public void GetRecentWorldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string featured = null;
            //string sort = null;
            //int? n = null;
            //string order = null;
            //int? offset = null;
            //string search = null;
            //string tag = null;
            //string notag = null;
            //string releaseStatus = null;
            //string maxUnityVersion = null;
            //string minUnityVersion = null;
            //string platform = null;
            //string userId = null;
            //var response = instance.GetRecentWorlds(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId);
            //Assert.IsInstanceOf(typeof(List<LimitedWorld>), response, "response is List<LimitedWorld>");
        }
        
        /// <summary>
        /// Test GetWorld
        /// </summary>
        [Test]
        public void GetWorldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string worldId = null;
            //var response = instance.GetWorld(worldId);
            //Assert.IsInstanceOf(typeof(World), response, "response is World");
        }
        
        /// <summary>
        /// Test GetWorldMetadata
        /// </summary>
        [Test]
        public void GetWorldMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string worldId = null;
            //var response = instance.GetWorldMetadata(worldId);
            //Assert.IsInstanceOf(typeof(InlineResponse2006), response, "response is InlineResponse2006");
        }
        
        /// <summary>
        /// Test GetWorldPublish
        /// </summary>
        [Test]
        public void GetWorldPublishTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string worldId = null;
            //var response = instance.GetWorldPublish(worldId);
            //Assert.IsInstanceOf(typeof(InlineResponse2007), response, "response is InlineResponse2007");
        }
        
        /// <summary>
        /// Test PublishWorld
        /// </summary>
        [Test]
        public void PublishWorldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string worldId = null;
            //instance.PublishWorld(worldId);
            
        }
        
        /// <summary>
        /// Test SearchWorlds
        /// </summary>
        [Test]
        public void SearchWorldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string featured = null;
            //string sort = null;
            //string user = null;
            //string userId = null;
            //int? n = null;
            //string order = null;
            //int? offset = null;
            //string search = null;
            //string tag = null;
            //string notag = null;
            //string releaseStatus = null;
            //string maxUnityVersion = null;
            //string minUnityVersion = null;
            //string platform = null;
            //var response = instance.SearchWorlds(featured, sort, user, userId, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform);
            //Assert.IsInstanceOf(typeof(List<LimitedWorld>), response, "response is List<LimitedWorld>");
        }
        
        /// <summary>
        /// Test UnpublishWorld
        /// </summary>
        [Test]
        public void UnpublishWorldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string worldId = null;
            //instance.UnpublishWorld(worldId);
            
        }
        
        /// <summary>
        /// Test UpdateWorld
        /// </summary>
        [Test]
        public void UpdateWorldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string worldId = null;
            //InlineObject6 inlineObject6 = null;
            //var response = instance.UpdateWorld(worldId, inlineObject6);
            //Assert.IsInstanceOf(typeof(World), response, "response is World");
        }
        
    }

}
