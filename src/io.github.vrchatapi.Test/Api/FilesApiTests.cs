/*
 * VRChat API Documentation
 *
 * ![VRChat API Banner](https://raw.githubusercontent.com/vrchatapi/vrchatapi.github.io/master/assets/apibanner.png)  # VRChat API Documentation This project is an [OPEN Open Source Project](https://openopensource.org)  Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.  ## Disclaimer  This is the official response of the VRChat Team (from Tupper more specifically) on the usage of the VRChat API.  > **Use of the API using applications other than the approved methods (website, VRChat application) are not officially supported. You may use the API for your own application, but keep these guidelines in mind:** > * We do not provide documentation or support for the API. > * Do not make queries to the API more than once per 60 seconds. > * Abuse of the API may result in account termination. > * Access to API endpoints may break at any given time, with no warning.  As stated, this documentation was not created with the help of the official VRChat team. Therefore this documentation is not an official documentation of the VRChat API and may not be always up to date with the latest versions. If you find that a page or endpoint is not longer valid please create an issue and tell us so we can fix it.  ## Get in touch with us!  [https://discord.gg/qjZE9C9fkB#vrchat-api](https://discord.gg/qjZE9C9fkB)
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: me@ruby.js.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using io.github.vrchatapi.Client;
using io.github.vrchatapi.Api;
using io.github.vrchatapi.Model;

namespace io.github.vrchatapi.Test
{
    /// <summary>
    ///  Class for testing FilesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FilesApiTests
    {
        private FilesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FilesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FilesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' FilesApi
            //Assert.IsInstanceOf(typeof(FilesApi), instance);
        }

        
        /// <summary>
        /// Test CreateFile
        /// </summary>
        [Test]
        public void CreateFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject3 inlineObject3 = null;
            //var response = instance.CreateFile(inlineObject3);
            //Assert.IsInstanceOf(typeof(File), response, "response is File");
        }
        
        /// <summary>
        /// Test CreateFileVersion
        /// </summary>
        [Test]
        public void CreateFileVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileId = null;
            //var response = instance.CreateFileVersion(fileId);
            //Assert.IsInstanceOf(typeof(File), response, "response is File");
        }
        
        /// <summary>
        /// Test DeleteFile
        /// </summary>
        [Test]
        public void DeleteFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileId = null;
            //var response = instance.DeleteFile(fileId);
            //Assert.IsInstanceOf(typeof(Success), response, "response is Success");
        }
        
        /// <summary>
        /// Test DeleteFileVersion
        /// </summary>
        [Test]
        public void DeleteFileVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileId = null;
            //int versionId = null;
            //var response = instance.DeleteFileVersion(fileId, versionId);
            //Assert.IsInstanceOf(typeof(File), response, "response is File");
        }
        
        /// <summary>
        /// Test DownloadFileVersion
        /// </summary>
        [Test]
        public void DownloadFileVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileId = null;
            //int versionId = null;
            //instance.DownloadFileVersion(fileId, versionId);
            
        }
        
        /// <summary>
        /// Test FinishFileDataUpload
        /// </summary>
        [Test]
        public void FinishFileDataUploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileId = null;
            //int versionId = null;
            //string fileType = null;
            //InlineObject4 inlineObject4 = null;
            //var response = instance.FinishFileDataUpload(fileId, versionId, fileType, inlineObject4);
            //Assert.IsInstanceOf(typeof(File), response, "response is File");
        }
        
        /// <summary>
        /// Test GetFile
        /// </summary>
        [Test]
        public void GetFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileId = null;
            //var response = instance.GetFile(fileId);
            //Assert.IsInstanceOf(typeof(File), response, "response is File");
        }
        
        /// <summary>
        /// Test GetFileDataUploadStatus
        /// </summary>
        [Test]
        public void GetFileDataUploadStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileId = null;
            //int versionId = null;
            //string fileType = null;
            //var response = instance.GetFileDataUploadStatus(fileId, versionId, fileType);
            //Assert.IsInstanceOf(typeof(InlineResponse2004), response, "response is InlineResponse2004");
        }
        
        /// <summary>
        /// Test GetFiles
        /// </summary>
        [Test]
        public void GetFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tag = null;
            //string userId = null;
            //int? n = null;
            //int? offset = null;
            //var response = instance.GetFiles(tag, userId, n, offset);
            //Assert.IsInstanceOf(typeof(List<File>), response, "response is List<File>");
        }
        
        /// <summary>
        /// Test StartFileDataUpload
        /// </summary>
        [Test]
        public void StartFileDataUploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileId = null;
            //int versionId = null;
            //string fileType = null;
            //int partNumber = null;
            //var response = instance.StartFileDataUpload(fileId, versionId, fileType, partNumber);
            //Assert.IsInstanceOf(typeof(InlineResponse2005), response, "response is InlineResponse2005");
        }
        
    }

}
